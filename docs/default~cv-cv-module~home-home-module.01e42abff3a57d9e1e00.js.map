{"version":3,"sources":["./src/app/animations.ts","./node_modules/@angular/material/__ivy_ngcc__/fesm2015/card.js","./node_modules/rxjs/_esm2015/internal/operators/mapTo.js","./node_modules/@angular/material/__ivy_ngcc__/fesm2015/sidenav.js","./node_modules/@angular/material/__ivy_ngcc__/fesm2015/divider.js","./src/app/shared/db.service.ts"],"names":["animations","opacity","transform","_c0","_c1","MatCardContent","ɵfac","t","ɵdir","type","selectors","hostAttrs","MatCardActions","this","align","hostVars","hostBindings","rf","ctx","inputs","exportAs","MatCardImage","MatCard","_animationMode","ɵcmp","ngContentSelectors","decls","vars","template","styles","encapsulation","changeDetection","MatCardModule","ɵmod","ɵinj","factory","imports","mapTo","value","source","lift","subscriber","subscribe","destination","x","next","Subscriber","MatDrawerContainer_div_0_Template","_r3","_onBackdropClicked","ctx_r0","_isShowingBackdrop","MatDrawerContainer_mat_drawer_content_3_Template","_c2","MatSidenavContainer_div_0_Template","MatSidenavContainer_mat_sidenav_content_3_Template","_c3","_c4","_c5","matDrawerAnimations","transformDrawer","MAT_DRAWER_DEFAULT_AUTOSIZE","providedIn","MAT_DRAWER_CONTAINER","MatDrawerContent","_changeDetectorRef","_container","elementRef","scrollDispatcher","ngZone","_contentMarginChanges","markForCheck","_contentMargins","left","right","features","MatDrawer","_elementRef","_focusTrapFactory","_focusMonitor","_platform","_ngZone","_doc","_elementFocusedBeforeDrawerWasOpened","_enableAnimations","_position","_mode","_disableClose","_opened","_animationStarted","Subject","_animationEnd","_animationState","openedChange","_openedStream","pipe","filter","o","map","openedStart","e","fromState","toState","indexOf","undefined","_closedStream","closedStart","_destroyed","onPositionChanged","_modeChanged","opened","activeElement","_takeFocus","_isFocusWithinDrawer","_restoreFocus","runOutsideAngular","fromEvent","nativeElement","event","keyCode","disableClose","takeUntil","run","close","stopPropagation","preventDefault","distinctUntilChanged","y","emit","autoFocus","_focusTrap","focusInitialElementWhenReady","then","hasMovedFocus","focus","focusVia","_openedVia","blur","_a","activeEl","contains","create","_updateFocusTrapState","isBrowser","destroy","complete","openedVia","toggle","_setOpen","isOpen","restoreFocus","Promise","resolve","take","open","offsetWidth","enabled","mode","_autoFocus","$event","_animationStartListener","_animationDoneListener","position","outputs","consts","data","animation","MatDrawerContainer","_dir","_element","viewportRuler","defaultAutosize","_drawers","backdropClick","_doCheckSubject","change","_validateDrawers","updateContentMargins","_autosize","_allDrawers","changes","startWith","drawer","reset","item","notifyOnChanges","forEach","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","length","_isDrawerOpen","_start","_end","debounceTime","_left","_getWidth","width","_right","_isPushed","classList","add","_setContainerClass","onMicrotaskEmpty","merge","isAdd","className","remove","_closeModalDrawersViaBackdrop","_canHaveBackdrop","_closeViaBackdropClick","_backdropOverride","_userContent","_content","contentQueries","dirIndex","_t","first","viewQuery","autosize","hasBackdrop","provide","useExisting","directives","MatSidenavContent","changeDetectorRef","container","MatSidenav","arguments","_fixedInViewport","_fixedTopGap","_fixedBottomGap","ɵMatSidenav_BaseFactory","fixedInViewport","fixedTopGap","fixedBottomGap","MatSidenavContainer","ɵMatSidenavContainer_BaseFactory","MatSidenavModule","MatDivider","_vertical","_inset","vertical","inset","MatDividerModule","http","experience","all","experiences","projects","sort","a","b","id","skills","educations","about","langs","get","DbService","About","title","date","Date","description","tech","image","url","isPrivate","git","intro","firstName","lastName","profession","info"],"mappings":"2FAAA,gDAMaA,EAAa,CACtB,YAAQ,kBAAmB,CACvB,YAAM,OAAQ,YAAM,CAChBC,QAAS,EACTC,UAAW,mBAEf,YAAM,OAAQ,YAAM,CAChBD,QAAS,EACTC,UAAW,qBAEf,YAAW,eAAgB,YAAQ,mBACnC,YAAW,eAAgB,YAAQ,0BAEvC,YAAQ,cAAe,CACnB,YAAM,OAAQ,YAAM,CAChBD,QAAS,EACTC,UAAW,mBAEf,YAAM,OAAQ,YAAM,CAChBD,QAAS,EACTC,UAAW,sBAEf,YAAW,eAAgB,YAAQ,mBACnC,YAAW,eAAgB,YAAQ,4B,sPCZrCC,EAAM,CAAC,IAAK,CAAC,CAAC,qBACdC,EAAM,CAAC,IAAK,mB,iBAKZC,E,yCAENA,EAAeC,UAAO,SAAgCC,GAAK,OAAO,IAAKA,GAAKF,IAC5EA,EAAeG,UAAO,KAAyB,CAAEC,KAAMJ,EAAgBK,UAAW,CAAC,CAAC,oBAAqB,CAAC,GAAI,mBAAoB,IAAK,CAAC,GAAI,iBAAkB,KAAMC,UAAW,CAAC,EAAG,sB,sBA8C7KC,EACF,iCAEIC,KAAKC,MAAQ,S,OAGrBF,EAAeN,UAAO,SAAgCC,GAAK,OAAO,IAAKA,GAAKK,IAC5EA,EAAeJ,UAAO,KAAyB,CAAEC,KAAMG,EAAgBF,UAAW,CAAC,CAAC,qBAAsBC,UAAW,CAAC,EAAG,oBAAqBI,SAAU,EAAGC,aAAc,SAAqCC,EAAIC,GAAgB,EAALD,GACrN,KAAmB,6BAA4C,QAAdC,EAAIJ,QACpDK,OAAQ,CAAEL,MAAO,SAAWM,SAAU,CAAC,oB,sBAoC1CC,E,yCAENA,EAAaf,UAAO,SAA8BC,GAAK,OAAO,IAAKA,GAAKc,IACxEA,EAAab,UAAO,KAAyB,CAAEC,KAAMY,EAAcX,UAAW,CAAC,CAAC,GAAI,iBAAkB,IAAK,CAAC,GAAI,eAAgB,KAAMC,UAAW,CAAC,EAAG,oB,sBA8F/IW,EAEF,WAAYC,GAAc,oBACtBV,KAAKU,eAAiBA,G,OAG9BD,EAAQhB,UAAO,SAAyBC,GAAK,OAAO,IAAKA,GAAKe,GAAS,KAAyB,IAAuB,KACvHA,EAAQE,UAAO,KAAyB,CAAEf,KAAMa,EAASZ,UAAW,CAAC,CAAC,aAAcC,UAAW,CAAC,EAAG,WAAY,uBAAwBI,SAAU,EAAGC,aAAc,SAA8BC,EAAIC,GAAgB,EAALD,GACvM,KAAmB,0BAAkD,mBAAvBC,EAAIK,iBACjDH,SAAU,CAAC,WAAYK,mBAAoBrB,EAAKsB,MAAO,EAAGC,KAAM,EAAGC,SAAU,SAA0BX,EAAIC,GAAgB,EAALD,IACvH,KAAuBd,GACvB,KAAoB,GACpB,KAAoB,EAAG,KACtB0B,OAAQ,CAAC,k8EAAm8EC,cAAe,EAAGC,gBAAiB,I,sBAoFl/EC,E,yCAENA,EAAcC,UAAO,KAAwB,CAAExB,KAAMuB,IACrDA,EAAcE,UAAO,KAAwB,CAAEC,QAAS,SAA+B5B,GAAK,OAAO,IAAKA,GAAKyB,IAAqBI,QAAS,CAAC,CAAC,KAAkB,O,wXCzTzJ,SAAUC,EAAMC,GAClB,OAAO,SAACC,GAAD,OAAYA,EAAOC,KAAK,IAAI,EAAcF,K,IAE/C,E,WACF,WAAYA,GAAK,oBACbzB,KAAKyB,MAAQA,E,iDAEZG,EAAYF,GACb,OAAOA,EAAOG,UAAU,IAAI,EAAgBD,EAAY5B,KAAKyB,Y,KAG/D,E,kDACF,WAAYK,EAAaL,GAAK,kCAC1B,cAAMK,IACDL,MAAQA,EAFa,E,kDAIxBM,GACF/B,KAAK8B,YAAYE,KAAKhC,KAAKyB,W,GANLQ,EAAA,G,4GCoBxB3C,EAAM,CAAC,KACb,SAAS4C,EAAkC9B,EAAIC,GAAO,GAAS,EAALD,EAAQ,CAC9D,IAAM+B,EAAM,OACZ,KAAsB,EAAG,MAAO,GAChC,KAAkB,QAAS,WAAsI,OAAlE,KAAqBA,GAAqB,OAAsCC,uBAC/K,OACF,GAAS,EAALhC,EAAQ,CACV,IAAMiC,EAAS,OACf,KAAmB,mBAAoBA,EAAOC,uBAElD,SAASC,EAAiDnC,EAAIC,GAAgB,EAALD,IACrE,KAAsB,EAAG,sBACzB,KAAoB,EAAG,GACvB,QAEJ,IAAMb,EAAM,CAAC,CAAC,CAAC,eAAgB,CAAC,CAAC,uBAAwB,KACnDiD,EAAM,CAAC,aAAc,qBAAsB,KACjD,SAASC,EAAmCrC,EAAIC,GAAO,GAAS,EAALD,EAAQ,CAC/D,IAAM+B,EAAM,OACZ,KAAsB,EAAG,MAAO,GAChC,KAAkB,QAAS,WAAuI,OAAlE,KAAqBA,GAAqB,OAAsCC,uBAChL,OACF,GAAS,EAALhC,EAAQ,CACV,IAAMiC,EAAS,OACf,KAAmB,mBAAoBA,EAAOC,uBAElD,SAASI,EAAmDtC,EAAIC,GAAgB,EAALD,IACvE,KAAsB,EAAG,sBAAuB,GAChD,KAAoB,EAAG,GACvB,QAEJ,IAAMuC,EAAM,CAAC,CAAC,CAAC,gBAAiB,CAAC,CAAC,wBAAyB,KACrDC,EAAM,CAAC,cAAe,sBAAuB,KAC7CC,EAAM,8oEACNC,EAAsB,CAExBC,gBAAiB,YAAQ,YAAa,CAKlC,YAAM,qBAAsB,YAAM,CAC9B,UAAa,OACb,WAAc,aAElB,YAAM,OAAQ,YAAM,CAEhB,aAAc,OACd,WAAc,YAElB,YAAW,uBAAwB,YAAQ,QAC3C,YAAW,sCAAuC,YAAQ,8CAY5DC,EAA8B,IAAI,IAAe,8BAA+B,CAClFC,WAAY,OACZ3B,QAQJ,WACI,OAAO,KAHL4B,EAAuB,IAAI,IAAe,wB,iBAK1CC,E,kDACF,WAAYC,EAAoBC,EAAYC,EAAYC,EAAkBC,GAAM,kCAC5E,cAAMF,EAAYC,EAAkBC,IAC/BJ,mBAAqBA,EAC1B,EAAKC,WAAaA,EAH0D,E,iEAK9D,WACdrD,KAAKqD,WAAWI,sBAAsB5B,UAAU,WAC5C,EAAKuB,mBAAmBM,qB,GARL,K,OAY/BP,EAAiB1D,UAAO,SAAkCC,GAAK,OAAO,IAAKA,GAAKyD,GAAkB,KAAyB,KAA2B,KAAyB,YAAW,kBAAM,KAAsB,KAAyB,KAAoB,KAAyB,KAA0B,KAAyB,OAC/UA,EAAiBxC,UAAO,KAAyB,CAAEf,KAAMuD,EAAkBtD,UAAW,CAAC,CAAC,uBAAwBC,UAAW,CAAC,EAAG,sBAAuBI,SAAU,EAAGC,aAAc,SAAuCC,EAAIC,GAAgB,EAALD,GAC/N,KAAmB,cAAeC,EAAIgD,WAAWM,gBAAgBC,KAAM,KAAvE,CAA6E,eAAgBvD,EAAIgD,WAAWM,gBAAgBE,MAAO,OAClIC,SAAU,CAAC,MAAoClD,mBAAoBtB,EAAKuB,MAAO,EAAGC,KAAM,EAAGC,SAAU,SAAmCX,EAAIC,GAAgB,EAALD,IACxJ,OACA,KAAoB,KACnBa,cAAe,EAAGC,gBAAiB,I,sBA4BtC6C,E,WACF,WAAYC,EAAaC,EAAmBC,EAAeC,EAAWC,EAASC,EAAMhB,GAAU,+BAC3FrD,KAAKgE,YAAcA,EACnBhE,KAAKiE,kBAAoBA,EACzBjE,KAAKkE,cAAgBA,EACrBlE,KAAKmE,UAAYA,EACjBnE,KAAKoE,QAAUA,EACfpE,KAAKqE,KAAOA,EACZrE,KAAKqD,WAAaA,EAClBrD,KAAKsE,qCAAuC,KAE5CtE,KAAKuE,mBAAoB,EACzBvE,KAAKwE,UAAY,QACjBxE,KAAKyE,MAAQ,OACbzE,KAAK0E,eAAgB,EACrB1E,KAAK2E,SAAU,EAEf3E,KAAK4E,kBAAoB,IAAIC,EAAA,EAE7B7E,KAAK8E,cAAgB,IAAID,EAAA,EAMzB7E,KAAK+E,gBAAkB,OAEvB/E,KAAKgF,aAEL,IAAI,KAA2B,GAE/BhF,KAAKiF,cAAgBjF,KAAKgF,aAAaE,KAAK,OAAAC,EAAA,GAAO,SAAAC,GAAC,OAAIA,IAAI,OAAAC,EAAA,GAAI,eAEhErF,KAAKsF,YAActF,KAAK4E,kBAAkBM,KAAK,OAAAC,EAAA,GAAO,SAAAI,GAAC,OAAIA,EAAEC,YAAcD,EAAEE,SAAyC,IAA9BF,EAAEE,QAAQC,QAAQ,UAAgBlE,OAAMmE,IAEhI3F,KAAK4F,cAAgB5F,KAAKgF,aAAaE,KAAK,OAAAC,EAAA,GAAO,SAAAC,GAAC,OAAKA,IAAI,OAAAC,EAAA,GAAI,eAEjErF,KAAK6F,YAAc7F,KAAK4E,kBAAkBM,KAAK,OAAAC,EAAA,GAAO,SAAAI,GAAC,OAAIA,EAAEC,YAAcD,EAAEE,SAAyB,SAAdF,EAAEE,UAAqBjE,OAAMmE,IAErH3F,KAAK8F,WAAa,IAAIjB,EAAA,EAGtB7E,KAAK+F,kBAAoB,IAAI,IAK7B/F,KAAKgG,aAAe,IAAInB,EAAA,EACxB7E,KAAKgF,aAAanD,UAAU,SAACoE,GACrBA,GACI,EAAK5B,OACL,EAAKC,qCAAuC,EAAKD,KAAK6B,eAE1D,EAAKC,cAEA,EAAKC,wBACV,EAAKC,kBAQbrG,KAAKoE,QAAQkC,kBAAkB,WAC3B,OAAAC,EAAA,GAAU,EAAKvC,YAAYwC,cAAe,WAAWtB,KAAK,OAAAC,EAAA,GAAO,SAAAsB,GAC7D,OAAOA,EAAMC,UAAY,MAAW,EAAKC,eAAiB,YAAeF,KACzE,OAAAG,EAAA,GAAU,EAAKd,aAAajE,UAAU,SAAA4E,GAAK,OAAI,EAAKrC,QAAQyC,IAAI,WAChE,EAAKC,QACLL,EAAMM,kBACNN,EAAMO,uBAKdhH,KAAK8E,cAAcI,KAAK,OAAA+B,EAAA,GAAqB,SAAClF,EAAGmF,GAC7C,OAAOnF,EAAEyD,YAAc0B,EAAE1B,WAAazD,EAAE0D,UAAYyB,EAAEzB,WACtD5D,UAAU,SAAC4E,GAAS,IACZjB,EAAuBiB,EAAvBjB,UAAWC,EAAYgB,EAAZhB,SACc,IAA5BA,EAAQC,QAAQ,SAA+B,SAAdF,GACrB,SAAZC,GAAoD,IAA9BD,EAAUE,QAAQ,UACzC,EAAKV,aAAamC,KAAK,EAAKxC,W,yDA+C9B,WACD3E,KAAKoH,WAAcpH,KAAKqH,YAG7BrH,KAAKqH,WAAWC,+BAA+BC,KAAK,SAAAC,GAG3CA,GAAiE,mBAAzC,EAAKxD,YAAYwC,cAAciB,OACxD,EAAKzD,YAAYwC,cAAciB,Y,sCASlCzH,KAAKoH,YAINpH,KAAKsE,qCACLtE,KAAKkE,cAAcwD,SAAS1H,KAAKsE,qCAAsCtE,KAAK2H,YAG5E3H,KAAKgE,YAAYwC,cAAcoB,OAEnC5H,KAAKsE,qCAAuC,KAC5CtE,KAAK2H,WAAa,Q,6CAIlB,IAAIE,EACEC,EAAgC,QAApBD,EAAK7H,KAAKqE,YAAyB,IAAPwD,OAAgB,EAASA,EAAG3B,cAC1E,QAAS4B,GAAY9H,KAAKgE,YAAYwC,cAAcuB,SAASD,K,2CAG7D9H,KAAKqH,WAAarH,KAAKiE,kBAAkB+D,OAAOhI,KAAKgE,YAAYwC,eACjExG,KAAKiI,0B,8CAODjI,KAAKmE,UAAU+D,YACflI,KAAKuE,mBAAoB,K,oCAIzBvE,KAAKqH,YACLrH,KAAKqH,WAAWc,UAEpBnI,KAAK4E,kBAAkBwD,WACvBpI,KAAK8E,cAAcsD,WACnBpI,KAAKgG,aAAaoC,WAClBpI,KAAK8F,WAAW9D,OAChBhC,KAAK8F,WAAWsC,a,2BAOfC,GACD,OAAOrI,KAAKsI,QAAO,EAAMD,K,8BAIzB,OAAOrI,KAAKsI,QAAO,K,+CAOnB,OAAOtI,KAAKuI,UAAsB,GAA0B,K,+BAQzB,IAAhCC,EAAgC,wDAAtBxI,KAAKiG,OAAQoC,EAAS,uCAGnC,OAAOrI,KAAKuI,SAASC,GAA4BA,GAAUxI,KAAKoG,uBAAwBiC,K,+BASnFG,EAAQC,GAAmC,WAArBJ,EAAqB,uDAAT,UAavC,OAZArI,KAAK2E,QAAU6D,EACXA,GACAxI,KAAK+E,gBAAkB/E,KAAKuE,kBAAoB,OAAS,eACzDvE,KAAK2H,WAAaU,IAGlBrI,KAAK+E,gBAAkB,OACnB0D,GACAzI,KAAKqG,iBAGbrG,KAAKiI,wBACE,IAAIS,QAAQ,SAAAC,GACf,EAAK3D,aAAaE,KAAK,OAAA0D,EAAA,GAAK,IAAI/G,UAAU,SAAAgH,GAAI,OAAIF,EAAQE,EAAO,OAAS,e,kCAI9E,OAAO7I,KAAKgE,YAAYwC,eAAiBxG,KAAKgE,YAAYwC,cAAcsC,aAAoB,I,8CAIxF9I,KAAKqH,aAELrH,KAAKqH,WAAW0B,QAAU/I,KAAKiG,QAAwB,SAAdjG,KAAKgJ,Q,8CAQ9BvC,GACpBzG,KAAK4E,kBAAkB5C,KAAKyE,K,6CAOTA,GACnBzG,KAAK8E,cAAc9C,KAAKyE,K,+BAnLX,OAAOzG,KAAKwE,W,aAChB/C,IAETA,EAAkB,QAAVA,EAAkB,MAAQ,UACrBzB,KAAKwE,YACdxE,KAAKwE,UAAY/C,EACjBzB,KAAK+F,kBAAkBoB,U,2BAIlB,OAAOnH,KAAKyE,O,aAChBhD,GACLzB,KAAKyE,MAAQhD,EACbzB,KAAKiI,wBACLjI,KAAKgG,aAAahE,S,mCAGD,OAAOhC,KAAK0E,e,aAChBjD,GAASzB,KAAK0E,cAAgB,YAAsBjD,K,gCAOjE,IAAMA,EAAQzB,KAAKiJ,WAInB,OAAgB,MAATxH,EAA8B,SAAdzB,KAAKgJ,KAAkBvH,G,aAEpCA,GAASzB,KAAKiJ,WAAa,YAAsBxH,K,6BAKhD,OAAOzB,KAAK2E,S,aAChBlD,GAASzB,KAAKsI,OAAO,YAAsB7G,Q,YAiJ1DsC,EAAUtE,UAAO,SAA2BC,GAAK,OAAO,IAAKA,GAAKqE,GAAW,KAAyB,KAAoB,KAAyB,KAA0B,KAAyB,KAAsB,KAAyB,KAAkB,KAAyB,KAAgB,KAAyB,IAAU,GAAI,KAAyBb,EAAsB,KACtYa,EAAUpD,UAAO,KAAyB,CAAEf,KAAMmE,EAAWlE,UAAW,CAAC,CAAC,eAAgBC,UAAW,CAAC,WAAY,KAAM,EAAG,cAAeI,SAAU,GAAIC,aAAc,SAAgCC,EAAIC,GAAgB,EAALD,GAC7M,KAA+B,mBAAoB,SAAgE8I,GAAU,OAAO7I,EAAI8I,wBAAwBD,IAAhK,CAA4K,kBAAmB,SAA+DA,GAAU,OAAO7I,EAAI+I,uBAAuBF,KACnS,EAAL9I,IACF,KAAmB,QAAS,MAC5B,KAA+B,aAAcC,EAAI0E,iBACjD,KAAmB,iBAAmC,QAAjB1E,EAAIgJ,SAAzC,CAA6D,kBAAgC,SAAbhJ,EAAI2I,KAApF,CAAqG,kBAAgC,SAAb3I,EAAI2I,KAA5H,CAA6I,kBAAgC,SAAb3I,EAAI2I,KAApK,CAAqL,oBAAqB3I,EAAI4F,UAC7M3F,OAAQ,CAAE+I,SAAU,WAAYL,KAAM,OAAQrC,aAAc,eAAgBS,UAAW,YAAanB,OAAQ,UAAYqD,QAAS,CAAEtE,aAAc,eAAgBC,cAAe,SAAUK,YAAa,cAAeM,cAAe,SAAUC,YAAa,cAAeE,kBAAmB,mBAAqBxF,SAAU,CAAC,aAAcK,mBAAoBtB,EAAKuB,MAAO,EAAGC,KAAM,EAAGyI,OAAQ,CAAC,CAAC,EAAG,+BAAgCxI,SAAU,SAA4BX,EAAIC,GAAgB,EAALD,IAC3d,OACA,KAAsB,EAAG,MAAO,GAChC,KAAoB,GACpB,SACCa,cAAe,EAAGuI,KAAM,CAAEC,UAAW,CAAC3G,EAAoBC,kBAAoB7B,gBAAiB,I,sBA8GlGwI,E,WACF,WAAYC,EAAMC,EAAUxF,EAAShB,EAAoByG,GAAsD,WAAvCC,EAAuC,wDAAdpJ,EAAc,2DAC3GV,KAAK2J,KAAOA,EACZ3J,KAAK4J,SAAWA,EAChB5J,KAAKoE,QAAUA,EACfpE,KAAKoD,mBAAqBA,EAC1BpD,KAAKU,eAAiBA,EAEtBV,KAAK+J,SAAW,IAAI,IAEpB/J,KAAKgK,cAAgB,IAAI,IAEzBhK,KAAK8F,WAAa,IAAIjB,EAAA,EAEtB7E,KAAKiK,gBAAkB,IAAIpF,EAAA,EAM3B7E,KAAK2D,gBAAkB,CAAEC,KAAM,KAAMC,MAAO,MAC5C7D,KAAKyD,sBAAwB,IAAIoB,EAAA,EAG7B8E,GACAA,EAAKO,OAAOhF,KAAK,OAAA0B,EAAA,GAAU5G,KAAK8F,aAAajE,UAAU,WACnD,EAAKsI,mBACL,EAAKC,yBAKbP,EAAcK,SACThF,KAAK,OAAA0B,EAAA,GAAU5G,KAAK8F,aACpBjE,UAAU,kBAAM,EAAKuI,yBAC1BpK,KAAKqK,UAAYP,E,iEAkCH,WACd9J,KAAKsK,YAAYC,QACZrF,KAAK,OAAAsF,EAAA,GAAUxK,KAAKsK,aAAc,OAAA1D,EAAA,GAAU5G,KAAK8F,aACjDjE,UAAU,SAAC4I,GACZ,EAAKV,SAASW,MAAMD,EAAOtF,OAAO,SAAAwF,GAAI,OAAKA,EAAKtH,YAAcsH,EAAKtH,aAAe,KAClF,EAAK0G,SAASa,oBAElB5K,KAAK+J,SAASQ,QAAQrF,KAAK,OAAAsF,EAAA,GAAU,OAAO3I,UAAU,WAClD,EAAKsI,mBACL,EAAKJ,SAASc,QAAQ,SAACJ,GACnB,EAAKK,mBAAmBL,GACxB,EAAKM,qBAAqBN,GAC1B,EAAKO,iBAAiBP,OAErB,EAAKV,SAASkB,QACf,EAAKC,cAAc,EAAKC,SACxB,EAAKD,cAAc,EAAKE,QACxB,EAAKhB,uBAET,EAAKhH,mBAAmBM,iBAG5B1D,KAAKoE,QAAQkC,kBAAkB,WAC3B,EAAK2D,gBAAgB/E,KAAK,OAAAmG,EAAA,GAAa,IACvC,OAAAzE,EAAA,GAAU,EAAKd,aAAajE,UAAU,kBAAM,EAAKuI,6B,oCAIrDpK,KAAKyD,sBAAsB2E,WAC3BpI,KAAKiK,gBAAgB7B,WACrBpI,KAAK+J,SAAS5B,UACdnI,KAAK8F,WAAW9D,OAChBhC,KAAK8F,WAAWsC,a,6BAIhBpI,KAAK+J,SAASc,QAAQ,SAAAJ,GAAM,OAAIA,EAAO5B,W,8BAIvC7I,KAAK+J,SAASc,QAAQ,SAAAJ,GAAM,OAAIA,EAAO3D,Y,6CAMvB,WAOZlD,EAAO,EACPC,EAAQ,EACZ,GAAI7D,KAAKsL,OAAStL,KAAKsL,MAAMrF,OACzB,GAAuB,QAAnBjG,KAAKsL,MAAMtC,KACXpF,GAAQ5D,KAAKsL,MAAMC,iBAElB,GAAuB,QAAnBvL,KAAKsL,MAAMtC,KAAgB,CAChC,IAAMwC,EAAQxL,KAAKsL,MAAMC,YACzB3H,GAAQ4H,EACR3H,GAAS2H,EAGjB,GAAIxL,KAAKyL,QAAUzL,KAAKyL,OAAOxF,OAC3B,GAAwB,QAApBjG,KAAKyL,OAAOzC,KACZnF,GAAS7D,KAAKyL,OAAOF,iBAEpB,GAAwB,QAApBvL,KAAKyL,OAAOzC,KAAgB,CACjC,IAAM,EAAQhJ,KAAKyL,OAAOF,YAC1B1H,GAAS,EACTD,GAAQ,EAQhBC,EAAQA,GAAS,MADjBD,EAAOA,GAAQ,QAEF5D,KAAK2D,gBAAgBC,MAAQC,IAAU7D,KAAK2D,gBAAgBE,QACrE7D,KAAK2D,gBAAkB,CAAEC,OAAMC,SAG/B7D,KAAKoE,QAAQyC,IAAI,kBAAM,EAAKpD,sBAAsBzB,KAAK,EAAK2B,sB,kCAG3D,WAED3D,KAAKqK,WAAarK,KAAK0L,aAEvB1L,KAAKoE,QAAQkC,kBAAkB,kBAAM,EAAK2D,gBAAgBjI,W,yCAQ/CyI,GAAM,WACrBA,EAAO7F,kBAAkBM,KAAK,OAAAC,EAAA,GAAO,SAACsB,GAAD,OAAWA,EAAMjB,YAAciB,EAAMhB,UAAU,OAAAmB,EAAA,GAAU5G,KAAK+J,SAASQ,UACvG1I,UAAU,SAAC4E,GAGU,iBAAlBA,EAAMhB,SAAsD,mBAAxB,EAAK/E,gBACzC,EAAKkJ,SAASpD,cAAcmF,UAAUC,IAAI,yBAE9C,EAAKxB,uBACL,EAAKhH,mBAAmBM,iBAER,SAAhB+G,EAAOzB,MACPyB,EAAOzF,aAAaE,KAAK,OAAA0B,EAAA,GAAU5G,KAAK+J,SAASQ,UAAU1I,UAAU,kBAAM,EAAKgK,mBAAmBpB,EAAOxE,Y,2CAO7FwE,GAAM,WAClBA,GAKLA,EAAO1E,kBAAkBb,KAAK,OAAA0B,EAAA,GAAU5G,KAAK+J,SAASQ,UAAU1I,UAAU,WACtE,EAAKuC,QAAQ0H,iBAAiB5G,KAAK,OAAA0D,EAAA,GAAK,IAAI/G,UAAU,WAClD,EAAKsI,yB,uCAKAM,GAAM,WACfA,GACAA,EAAOzE,aAAad,KAAK,OAAA0B,EAAA,GAAU,OAAAmF,EAAA,GAAM/L,KAAK+J,SAASQ,QAASvK,KAAK8F,cAChEjE,UAAU,WACX,EAAKuI,uBACL,EAAKhH,mBAAmBM,mB,yCAKjBsI,GACf,IAAML,EAAY3L,KAAK4J,SAASpD,cAAcmF,UACxCM,EAAY,gCACdD,EACAL,EAAUC,IAAIK,GAGdN,EAAUO,OAAOD,K,yCAIT,WACZjM,KAAKmL,OAASnL,KAAKoL,KAAO,KAE1BpL,KAAK+J,SAASc,QAAQ,SAAAJ,GACK,OAAnBA,EAAOpB,SAIP,EAAK+B,KAAOX,EAMZ,EAAKU,OAASV,IAGtBzK,KAAKyL,OAASzL,KAAKsL,MAAQ,KAEvBtL,KAAK2J,MAA4B,QAApB3J,KAAK2J,KAAKlI,OACvBzB,KAAKsL,MAAQtL,KAAKoL,KAClBpL,KAAKyL,OAASzL,KAAKmL,SAGnBnL,KAAKsL,MAAQtL,KAAKmL,OAClBnL,KAAKyL,OAASzL,KAAKoL,Q,kCAKvB,OAAQpL,KAAKkL,cAAclL,KAAKmL,SAA+B,QAApBnL,KAAKmL,OAAOnC,MAClDhJ,KAAKkL,cAAclL,KAAKoL,OAA2B,QAAlBpL,KAAKoL,KAAKpC,O,2CAGhDhJ,KAAKgK,cAAc7C,OACnBnH,KAAKmM,kC,sDAEoB,WAEzB,CAACnM,KAAKmL,OAAQnL,KAAKoL,MACdjG,OAAO,SAAAsF,GAAM,OAAIA,IAAWA,EAAO9D,cAAgB,EAAKyF,iBAAiB3B,KACzEI,QAAQ,SAAAJ,GAAM,OAAIA,EAAO4B,6B,2CAG9B,OAAQrM,KAAKkL,cAAclL,KAAKmL,SAAWnL,KAAKoM,iBAAiBpM,KAAKmL,SACjEnL,KAAKkL,cAAclL,KAAKoL,OAASpL,KAAKoM,iBAAiBpM,KAAKoL,Q,uCAEpDX,GACb,MAAuB,SAAhBA,EAAOzB,QAAqBhJ,KAAKsM,oB,oCAE9B7B,GACV,OAAiB,MAAVA,GAAkBA,EAAOxE,S,4BA3OtB,OAAOjG,KAAKmL,S,0BAEd,OAAOnL,KAAKoL,O,+BASP,OAAOpL,KAAKqK,W,aAChB5I,GAASzB,KAAKqK,UAAY,YAAsB5I,K,kCAOzD,OAA8B,MAA1BzB,KAAKsM,mBACGtM,KAAKmL,QAA+B,SAArBnL,KAAKmL,OAAOnC,OAAoBhJ,KAAKoL,MAA2B,SAAnBpL,KAAKoL,KAAKpC,KAE3EhJ,KAAKsM,mB,aAEA7K,GACZzB,KAAKsM,kBAA6B,MAAT7K,EAAgB,KAAO,YAAsBA,K,iCAItE,OAAOzB,KAAKuM,cAAgBvM,KAAKwM,a,YAiNzC9C,EAAmBjK,UAAO,SAAoCC,GAAK,OAAO,IAAKA,GAAKgK,GAAoB,KAAyB,IAAuB,GAAI,KAAyB,KAAoB,KAAyB,KAAgB,KAAyB,KAA2B,KAAyB,KAAuB,KAAyB1G,GAA8B,KAAyB,IAAuB,KAC7b0G,EAAmB/I,UAAO,KAAyB,CAAEf,KAAM8J,EAAoB7J,UAAW,CAAC,CAAC,yBAA0B4M,eAAgB,SAA2CrM,EAAIC,EAAKqM,GAIlL,IAAIC,EAJmM,EAALvM,IAClM,KAAsBsM,EAAU,GAAkB,GAClD,KAAsBA,EAAU,GAAW,IACpC,EAALtM,IAEF,KAAsBuM,EAAK,UAA0BtM,EAAImM,SAAWG,EAAGC,OACvE,KAAsBD,EAAK,UAA0BtM,EAAIiK,YAAcqC,KACtEE,UAAW,SAAkCzM,EAAIC,GAGlD,IAAIsM,EAH8D,EAALvM,GAC7D,KAAmB,GAAkB,GAC9B,EAALA,GAEF,KAAsBuM,EAAK,UAA0BtM,EAAIkM,aAAeI,EAAGC,QAC1E9M,UAAW,CAAC,EAAG,wBAAyBI,SAAU,EAAGC,aAAc,SAAyCC,EAAIC,GAAgB,EAALD,GAC5H,KAAmB,yCAA0CC,EAAIiM,oBAChEhM,OAAQ,CAAEwM,SAAU,WAAYC,YAAa,eAAiBzD,QAAS,CAAEU,cAAe,iBAAmBzJ,SAAU,CAAC,sBAAuBuD,SAAU,CAAC,KAA0B,CAAC,CAC5KkJ,QAAS9J,EACT+J,YAAavD,MACX9I,mBAAoB4B,EAAK3B,MAAO,EAAGC,KAAM,EAAGyI,OAAQ,CAAC,CAAC,QAAS,sBAAuB,EAAG,mBAAoB,QAAS,EAAG,QAAS,CAAC,EAAG,QAAS,CAAC,EAAG,sBAAuB,EAAG,UAAWxI,SAAU,SAAqCX,EAAIC,GAAgB,EAALD,IAChQ,KAAuBb,GACvB,KAAkB,EAAG2C,EAAmC,EAAG,EAAG,MAAO,GACrE,KAAoB,GACpB,KAAoB,EAAG,GACvB,KAAkB,EAAGK,EAAkD,EAAG,EAAG,qBAAsB,IAC5F,EAALnC,IACF,KAAkB,OAAQC,EAAI0M,aAC9B,KAAiB,GACjB,KAAkB,QAAS1M,EAAImM,YAC9BU,WAAY,CAAC,IAAa,GAAmBlM,OAAQ,CAAC6B,GAAM5B,cAAe,EAAGC,gBAAiB,I,sBA8ElGiM,E,kDACF,WAAYC,EAAmBC,EAAW/J,EAAYC,EAAkBC,GAAM,uCACpE4J,EAAmBC,EAAW/J,EAAYC,EAAkBC,G,UAF1C,G,OAKhC2J,EAAkB1N,UAAO,SAAmCC,GAAK,OAAO,IAAKA,GAAKyN,GAAmB,KAAyB,KAA2B,KAAyB,YAAW,kBAAM,KAAuB,KAAyB,KAAoB,KAAyB,KAA0B,KAAyB,OACnVA,EAAkBxM,UAAO,KAAyB,CAAEf,KAAMuN,EAAmBtN,UAAW,CAAC,CAAC,wBAAyBC,UAAW,CAAC,EAAG,qBAAsB,uBAAwBI,SAAU,EAAGC,aAAc,SAAwCC,EAAIC,GAAgB,EAALD,GAC1P,KAAmB,cAAeC,EAAIgD,WAAWM,gBAAgBC,KAAM,KAAvE,CAA6E,eAAgBvD,EAAIgD,WAAWM,gBAAgBE,MAAO,OAClIC,SAAU,CAAC,MAAoClD,mBAAoBtB,EAAKuB,MAAO,EAAGC,KAAM,EAAGC,SAAU,SAAoCX,EAAIC,GAAgB,EAALD,IACzJ,OACA,KAAoB,KACnBa,cAAe,EAAGC,gBAAiB,I,sBAyBtCoM,E,kDACF,+CACI,eAASC,YACJC,kBAAmB,EACxB,EAAKC,aAAe,EACpB,EAAKC,gBAAkB,EAJ3B,E,4DAOwB,OAAO1N,KAAKwN,kB,aAChB/L,GAASzB,KAAKwN,iBAAmB,YAAsB/L,K,kCAKvD,OAAOzB,KAAKyN,c,aAChBhM,GAASzB,KAAKyN,aAAe,YAAqBhM,K,qCAK3C,OAAOzB,KAAK0N,iB,aAChBjM,GAASzB,KAAK0N,gBAAkB,YAAqBjM,O,GArBnD,G,OAuBzB6L,EAAW7N,UAAO,SAA4BC,GAAK,OAAOiO,EAAwBjO,GAAK4N,IACvFA,EAAW3M,UAAO,KAAyB,CAAEf,KAAM0N,EAAYzN,UAAW,CAAC,CAAC,gBAAiBC,UAAW,CAAC,WAAY,KAAM,EAAG,aAAc,eAAgBI,SAAU,GAAIC,aAAc,SAAiCC,EAAIC,GAAgB,EAALD,IAChO,KAAmB,QAAS,MAC5B,KAAmB,MAAOC,EAAIuN,gBAAkBvN,EAAIwN,YAAc,KAAM,KAAxE,CAA8E,SAAUxN,EAAIuN,gBAAkBvN,EAAIyN,eAAiB,KAAM,MACzI,KAAmB,iBAAmC,QAAjBzN,EAAIgJ,SAAzC,CAA6D,kBAAgC,SAAbhJ,EAAI2I,KAApF,CAAqG,kBAAgC,SAAb3I,EAAI2I,KAA5H,CAA6I,kBAAgC,SAAb3I,EAAI2I,KAApK,CAAqL,oBAAqB3I,EAAI4F,OAA9M,CAAsN,oBAAqB5F,EAAIuN,mBAC9OtN,OAAQ,CAAEsN,gBAAiB,kBAAmBC,YAAa,cAAeC,eAAgB,kBAAoBvN,SAAU,CAAC,cAAeuD,SAAU,CAAC,MAAoClD,mBAAoBtB,EAAKuB,MAAO,EAAGC,KAAM,EAAGyI,OAAQ,CAAC,CAAC,EAAG,+BAAgCxI,SAAU,SAA6BX,EAAIC,GAAgB,EAALD,IACvU,OACA,KAAsB,EAAG,MAAO,GAChC,KAAoB,GACpB,SACCa,cAAe,EAAGuI,KAAM,CAAEC,UAAW,CAAC3G,EAAoBC,kBAAoB7B,gBAAiB,I,KAMlGyM,EAAwC,KAA6B,G,iBAgCrEI,E,4HAA4B,G,OAElCA,EAAoBtO,UAAO,SAAqCC,GAAK,OAAOsO,EAAiCtO,GAAKqO,IAClHA,EAAoBpN,UAAO,KAAyB,CAAEf,KAAMmO,EAAqBlO,UAAW,CAAC,CAAC,0BAA2B4M,eAAgB,SAA4CrM,EAAIC,EAAKqM,GAItL,IAAIC,EAJuM,EAALvM,IACtM,KAAsBsM,EAAU,GAAmB,GACnD,KAAsBA,EAAU,GAAY,IACrC,EAALtM,IAEF,KAAsBuM,EAAK,UAA0BtM,EAAImM,SAAWG,EAAGC,OACvE,KAAsBD,EAAK,UAA0BtM,EAAIiK,YAAcqC,KACtE7M,UAAW,CAAC,EAAG,uBAAwB,yBAA0BI,SAAU,EAAGC,aAAc,SAA0CC,EAAIC,GAAgB,EAALD,GACtJ,KAAmB,yCAA0CC,EAAIiM,oBAChE/L,SAAU,CAAC,uBAAwBuD,SAAU,CAAC,KAA0B,CAAC,CAClEkJ,QAAS9J,EACT+J,YAAac,KACZ,MAAoCnN,mBAAoBgC,EAAK/B,MAAO,EAAGC,KAAM,EAAGyI,OAAQ,CAAC,CAAC,QAAS,sBAAuB,EAAG,mBAAoB,QAAS,EAAG,QAAS,CAAC,gBAAiB,GAAI,EAAG,QAAS,CAAC,EAAG,sBAAuB,EAAG,SAAU,CAAC,gBAAiB,KAAMxI,SAAU,SAAsCX,EAAIC,GAAgB,EAALD,IAChV,KAAuBuC,GACvB,KAAkB,EAAGF,EAAoC,EAAG,EAAG,MAAO,GACtE,KAAoB,GACpB,KAAoB,EAAG,GACvB,KAAkB,EAAGC,EAAoD,EAAG,EAAG,sBAAuB,IAC/F,EAALtC,IACF,KAAkB,OAAQC,EAAI0M,aAC9B,KAAiB,GACjB,KAAkB,QAAS1M,EAAImM,YAC9BU,WAAY,CAAC,IAAa,EAAmB,KAAuBlM,OAAQ,CAAC6B,GAAM5B,cAAe,EAAGC,gBAAiB,I,KASzH8M,EAAiD,KAA6B,G,iBAsC9EC,E,yCAENA,EAAiB7M,UAAO,KAAwB,CAAExB,KAAMqO,IACxDA,EAAiB5M,UAAO,KAAwB,CAAEC,QAAS,SAAkC5B,GAAK,OAAO,IAAKA,GAAKuO,IAAwB1M,QAAS,CAAC,CACzI,IACA,IACA,IACA,KACD,IACH,O,yLC9kCF2M,E,WACF,iCACIlO,KAAKmO,WAAY,EACjBnO,KAAKoO,QAAS,E,qDAGD,OAAOpO,KAAKmO,W,aAChB1M,GAASzB,KAAKmO,UAAY,YAAsB1M,K,4BAE/C,OAAOzB,KAAKoO,Q,aAChB3M,GAASzB,KAAKoO,OAAS,YAAsB3M,O,YAE3DyM,EAAWzO,UAAO,SAA4BC,GAAK,OAAO,IAAKA,GAAKwO,IACpEA,EAAWvN,UAAO,KAAyB,CAAEf,KAAMsO,EAAYrO,UAAW,CAAC,CAAC,gBAAiBC,UAAW,CAAC,OAAQ,YAAa,EAAG,eAAgBI,SAAU,EAAGC,aAAc,SAAiCC,EAAIC,GAAgB,EAALD,IACpN,KAAmB,mBAAoBC,EAAIgO,SAAW,WAAa,cACnE,KAAmB,uBAAwBhO,EAAIgO,SAA/C,CAAyD,0BAA2BhO,EAAIgO,SAAxF,CAAkG,oBAAqBhO,EAAIiO,SAC1HhO,OAAQ,CAAE+N,SAAU,WAAYC,MAAO,SAAWzN,MAAO,EAAGC,KAAM,EAAGC,SAAU,SAA6BX,EAAIC,KAAUW,OAAQ,CAAC,iTAAkTC,cAAe,EAAGC,gBAAiB,I,sBAmC3dqN,E,yCAENA,EAAiBnN,UAAO,KAAwB,CAAExB,KAAM2O,IACxDA,EAAiBlN,UAAO,KAAwB,CAAEC,QAAS,SAAkC5B,GAAK,OAAO,IAAKA,GAAK6O,IAAwBhN,QAAS,CAAC,CAAC,KAAkB,O,wCChExK,wKAEA,aAKE,WAAoBiN,GAAA,KAAAA,O,OAEpB,YAAAC,WAAA,WACE,OAAOzO,KAAK0O,MAAMxJ,KAAK,YAAI,SAAAK,GAAK,OAAAA,EAAEoJ,gBAGpC,YAAAC,SAAA,WACE,OAAO5O,KAAK0O,MAAMxJ,KAAK,YAAI,SAAAK,GAAK,OAAAA,EAAEqJ,SAASC,KAAK,SAACC,EAAGC,GAAM,OAAAA,EAAEC,GAAKF,EAAEE,SAGrE,YAAAC,OAAA,WACE,OAAOjP,KAAK0O,MAAMxJ,KAAK,YAAI,SAAAK,GAAK,OAAAA,EAAE0J,OAAOJ,KAAK,SAACC,EAAGC,GAAM,OAAAD,EAAEE,GAAKD,EAAEC,SAGnE,YAAAE,WAAA,WACE,OAAOlP,KAAK0O,MAAMxJ,KAAK,YAAI,SAAAK,GAAK,OAAAA,EAAE2J,WAAWL,KAAK,SAACC,EAAGC,GAAM,OAAAA,EAAEC,GAAKF,EAAEE,SAGvE,YAAAG,MAAA,WACE,OAAOnP,KAAK0O,MAAMxJ,KAAK,YAAI,SAAAK,GAAK,OAAAA,EAAE4J,UAGpC,YAAAC,MAAA,WACE,OAAOpP,KAAK0O,MAAMxJ,KAAK,YAAI,SAAAK,GAAK,OAAAA,EAAE6J,UAGpC,YAAAV,IAAA,WACE,OAAO1O,KAAKwO,KAAKa,IAAc,4B,sCA7BtBC,GAAS,Y,yBAATA,EAAS,QAATA,EAAS,qBAFR,S,EADd,GAoCA,aAOA,OAPA,WACE,KAAAX,YAA4B,GAC5B,KAAAC,SAAsB,GACtB,KAAAK,OAAkB,GAClB,KAAAC,WAA0B,GAC1B,KAAAC,MAAQ,IAAII,EACZ,KAAAH,MAAgB,IANlB,GAmBA,aAUA,OAVA,WACE,KAAAJ,GAAK,EACL,KAAAQ,MAAQ,GACR,KAAAC,KAAO,IAAIC,KACX,KAAAC,YAAc,GACd,KAAAC,KAAO,GACP,KAAAC,MAAQ,GACR,KAAAC,IAAM,GACN,KAAAC,WAAY,EACZ,KAAAC,IAAM,IATR,GAyBA,aAOA,OAPA,WACE,KAAAC,MAAQ,GACR,KAAAC,UAAY,GACZ,KAAAC,SAAW,GACX,KAAAC,WAAa,GACb,KAAAP,MAAQ,GACR,KAAAQ,KAAuD,IANzD","file":"default~cv-cv-module~home-home-module.01e42abff3a57d9e1e00.js","sourcesContent":["import {\r\n    style, animate, animation, animateChild, useAnimation, group, sequence,\r\n    transition, state, trigger, query, stagger\r\n} from '@angular/animations';\r\n\r\n\r\nexport const animations = [\r\n    trigger('scrollAnimation', [\r\n        state('show', style({\r\n            opacity: 1,\r\n            transform: 'translateX(0)'\r\n        })),\r\n        state('hide', style({\r\n            opacity: 0,\r\n            transform: 'translateY(15%)'\r\n        })),\r\n        transition('show => hide', animate('700ms ease-out')),\r\n        transition('hide => show', animate('1000ms 0ms ease-out'))\r\n    ]),\r\n    trigger('scrollTitle', [\r\n        state('show', style({\r\n            opacity: 1,\r\n            transform: 'translateX(0)'\r\n        })),\r\n        state('hide', style({\r\n            opacity: 0,\r\n            transform: 'translateY(-15%)'\r\n        })),\r\n        transition('show => hide', animate('700ms ease-out')),\r\n        transition('hide => show', animate('1000ms 0ms ease-out'))\r\n    ]),\r\n    // nice stagger effect when showing existing elements\r\n    // trigger('list', [\r\n    //     transition(':enter', [\r\n    //         // child animation selector + stagger\r\n    //         query('@items',\r\n    //             stagger(300, animateChild())\r\n    //         )\r\n    //     ]),\r\n    // ]),\r\n    // trigger('items', [\r\n    //     // cubic-bezier for a tiny bouncing feel\r\n    //     transition(':enter', [\r\n    //         style({ transform: 'scale(0.5)', opacity: 0 }),\r\n    //         animate('1s cubic-bezier(.8,-0.6,0.2,1.5)',\r\n    //             style({ transform: 'scale(1)', opacity: 1 }))\r\n    //     ]),\r\n    //     transition(':leave', [\r\n    //         style({ transform: 'scale(1)', opacity: 1, height: '*' }),\r\n    //         animate('1s cubic-bezier(.8,-0.6,0.2,1.5)',\r\n    //             style({ transform: 'scale(0.5)', opacity: 0, height: '0px', margin: '0px' }))\r\n    //     ]),\r\n    // ])\r\n];\r\n","import { Directive, Input, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, NgModule } from '@angular/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { MatCommonModule } from '@angular/material/core';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\n\nconst _c0 = [\"*\", [[\"mat-card-footer\"]]];\nconst _c1 = [\"*\", \"mat-card-footer\"];\nconst _c2 = [[[\"\", \"mat-card-avatar\", \"\"], [\"\", \"matCardAvatar\", \"\"]], [[\"mat-card-title\"], [\"mat-card-subtitle\"], [\"\", \"mat-card-title\", \"\"], [\"\", \"mat-card-subtitle\", \"\"], [\"\", \"matCardTitle\", \"\"], [\"\", \"matCardSubtitle\", \"\"]], \"*\"];\nconst _c3 = [\"[mat-card-avatar], [matCardAvatar]\", \"mat-card-title, mat-card-subtitle,\\n      [mat-card-title], [mat-card-subtitle],\\n      [matCardTitle], [matCardSubtitle]\", \"*\"];\nconst _c4 = [[[\"mat-card-title\"], [\"mat-card-subtitle\"], [\"\", \"mat-card-title\", \"\"], [\"\", \"mat-card-subtitle\", \"\"], [\"\", \"matCardTitle\", \"\"], [\"\", \"matCardSubtitle\", \"\"]], [[\"img\"]], \"*\"];\nconst _c5 = [\"mat-card-title, mat-card-subtitle,\\n      [mat-card-title], [mat-card-subtitle],\\n      [matCardTitle], [matCardSubtitle]\", \"img\", \"*\"];\nclass MatCardContent {\n}\nMatCardContent.ɵfac = function MatCardContent_Factory(t) { return new (t || MatCardContent)(); };\nMatCardContent.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatCardContent, selectors: [[\"mat-card-content\"], [\"\", \"mat-card-content\", \"\"], [\"\", \"matCardContent\", \"\"]], hostAttrs: [1, \"mat-card-content\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatCardContent, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-card-content, [mat-card-content], [matCardContent]',\n                host: { 'class': 'mat-card-content' }\n            }]\n    }], null, null); })();\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\nclass MatCardTitle {\n}\nMatCardTitle.ɵfac = function MatCardTitle_Factory(t) { return new (t || MatCardTitle)(); };\nMatCardTitle.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatCardTitle, selectors: [[\"mat-card-title\"], [\"\", \"mat-card-title\", \"\"], [\"\", \"matCardTitle\", \"\"]], hostAttrs: [1, \"mat-card-title\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatCardTitle, [{\n        type: Directive,\n        args: [{\n                selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n                host: {\n                    'class': 'mat-card-title'\n                }\n            }]\n    }], null, null); })();\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\nclass MatCardSubtitle {\n}\nMatCardSubtitle.ɵfac = function MatCardSubtitle_Factory(t) { return new (t || MatCardSubtitle)(); };\nMatCardSubtitle.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatCardSubtitle, selectors: [[\"mat-card-subtitle\"], [\"\", \"mat-card-subtitle\", \"\"], [\"\", \"matCardSubtitle\", \"\"]], hostAttrs: [1, \"mat-card-subtitle\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatCardSubtitle, [{\n        type: Directive,\n        args: [{\n                selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n                host: {\n                    'class': 'mat-card-subtitle'\n                }\n            }]\n    }], null, null); })();\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\nclass MatCardActions {\n    constructor() {\n        /** Position of the actions inside the card. */\n        this.align = 'start';\n    }\n}\nMatCardActions.ɵfac = function MatCardActions_Factory(t) { return new (t || MatCardActions)(); };\nMatCardActions.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatCardActions, selectors: [[\"mat-card-actions\"]], hostAttrs: [1, \"mat-card-actions\"], hostVars: 2, hostBindings: function MatCardActions_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-card-actions-align-end\", ctx.align === \"end\");\n    } }, inputs: { align: \"align\" }, exportAs: [\"matCardActions\"] });\nMatCardActions.propDecorators = {\n    align: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatCardActions, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-card-actions',\n                exportAs: 'matCardActions',\n                host: {\n                    'class': 'mat-card-actions',\n                    '[class.mat-card-actions-align-end]': 'align === \"end\"'\n                }\n            }]\n    }], function () { return []; }, { align: [{\n            type: Input\n        }] }); })();\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\nclass MatCardFooter {\n}\nMatCardFooter.ɵfac = function MatCardFooter_Factory(t) { return new (t || MatCardFooter)(); };\nMatCardFooter.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatCardFooter, selectors: [[\"mat-card-footer\"]], hostAttrs: [1, \"mat-card-footer\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatCardFooter, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-card-footer',\n                host: { 'class': 'mat-card-footer' }\n            }]\n    }], null, null); })();\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\nclass MatCardImage {\n}\nMatCardImage.ɵfac = function MatCardImage_Factory(t) { return new (t || MatCardImage)(); };\nMatCardImage.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatCardImage, selectors: [[\"\", \"mat-card-image\", \"\"], [\"\", \"matCardImage\", \"\"]], hostAttrs: [1, \"mat-card-image\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatCardImage, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-card-image], [matCardImage]',\n                host: { 'class': 'mat-card-image' }\n            }]\n    }], null, null); })();\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\nclass MatCardSmImage {\n}\nMatCardSmImage.ɵfac = function MatCardSmImage_Factory(t) { return new (t || MatCardSmImage)(); };\nMatCardSmImage.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatCardSmImage, selectors: [[\"\", \"mat-card-sm-image\", \"\"], [\"\", \"matCardImageSmall\", \"\"]], hostAttrs: [1, \"mat-card-sm-image\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatCardSmImage, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-card-sm-image], [matCardImageSmall]',\n                host: { 'class': 'mat-card-sm-image' }\n            }]\n    }], null, null); })();\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\nclass MatCardMdImage {\n}\nMatCardMdImage.ɵfac = function MatCardMdImage_Factory(t) { return new (t || MatCardMdImage)(); };\nMatCardMdImage.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatCardMdImage, selectors: [[\"\", \"mat-card-md-image\", \"\"], [\"\", \"matCardImageMedium\", \"\"]], hostAttrs: [1, \"mat-card-md-image\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatCardMdImage, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-card-md-image], [matCardImageMedium]',\n                host: { 'class': 'mat-card-md-image' }\n            }]\n    }], null, null); })();\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\nclass MatCardLgImage {\n}\nMatCardLgImage.ɵfac = function MatCardLgImage_Factory(t) { return new (t || MatCardLgImage)(); };\nMatCardLgImage.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatCardLgImage, selectors: [[\"\", \"mat-card-lg-image\", \"\"], [\"\", \"matCardImageLarge\", \"\"]], hostAttrs: [1, \"mat-card-lg-image\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatCardLgImage, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-card-lg-image], [matCardImageLarge]',\n                host: { 'class': 'mat-card-lg-image' }\n            }]\n    }], null, null); })();\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\nclass MatCardXlImage {\n}\nMatCardXlImage.ɵfac = function MatCardXlImage_Factory(t) { return new (t || MatCardXlImage)(); };\nMatCardXlImage.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatCardXlImage, selectors: [[\"\", \"mat-card-xl-image\", \"\"], [\"\", \"matCardImageXLarge\", \"\"]], hostAttrs: [1, \"mat-card-xl-image\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatCardXlImage, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-card-xl-image], [matCardImageXLarge]',\n                host: { 'class': 'mat-card-xl-image' }\n            }]\n    }], null, null); })();\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\nclass MatCardAvatar {\n}\nMatCardAvatar.ɵfac = function MatCardAvatar_Factory(t) { return new (t || MatCardAvatar)(); };\nMatCardAvatar.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatCardAvatar, selectors: [[\"\", \"mat-card-avatar\", \"\"], [\"\", \"matCardAvatar\", \"\"]], hostAttrs: [1, \"mat-card-avatar\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatCardAvatar, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-card-avatar], [matCardAvatar]',\n                host: { 'class': 'mat-card-avatar' }\n            }]\n    }], null, null); })();\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\nclass MatCard {\n    // @breaking-change 9.0.0 `_animationMode` parameter to be made required.\n    constructor(_animationMode) {\n        this._animationMode = _animationMode;\n    }\n}\nMatCard.ɵfac = function MatCard_Factory(t) { return new (t || MatCard)(ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\nMatCard.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatCard, selectors: [[\"mat-card\"]], hostAttrs: [1, \"mat-card\", \"mat-focus-indicator\"], hostVars: 2, hostBindings: function MatCard_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    } }, exportAs: [\"matCard\"], ngContentSelectors: _c1, decls: 2, vars: 0, template: function MatCard_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c0);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵprojection(1, 1);\n    } }, styles: [\".mat-card{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:block;position:relative;padding:16px;border-radius:4px}._mat-animation-noopable.mat-card{transition:none;animation:none}.mat-card .mat-divider-horizontal{position:absolute;left:0;width:100%}[dir=rtl] .mat-card .mat-divider-horizontal{left:auto;right:0}.mat-card .mat-divider-horizontal.mat-divider-inset{position:static;margin:0}[dir=rtl] .mat-card .mat-divider-horizontal.mat-divider-inset{margin-right:0}.cdk-high-contrast-active .mat-card{outline:solid 1px}.mat-card-actions,.mat-card-subtitle,.mat-card-content{display:block;margin-bottom:16px}.mat-card-title{display:block;margin-bottom:8px}.mat-card-actions{margin-left:-8px;margin-right:-8px;padding:8px 0}.mat-card-actions-align-end{display:flex;justify-content:flex-end}.mat-card-image{width:calc(100% + 32px);margin:0 -16px 16px -16px}.mat-card-footer{display:block;margin:0 -16px -16px -16px}.mat-card-actions .mat-button,.mat-card-actions .mat-raised-button,.mat-card-actions .mat-stroked-button{margin:0 8px}.mat-card-header{display:flex;flex-direction:row}.mat-card-header .mat-card-title{margin-bottom:12px}.mat-card-header-text{margin:0 16px}.mat-card-avatar{height:40px;width:40px;border-radius:50%;flex-shrink:0;object-fit:cover}.mat-card-title-group{display:flex;justify-content:space-between}.mat-card-sm-image{width:80px;height:80px}.mat-card-md-image{width:112px;height:112px}.mat-card-lg-image{width:152px;height:152px}.mat-card-xl-image{width:240px;height:240px;margin:-8px}.mat-card-title-group>.mat-card-xl-image{margin:-8px 0 8px}@media(max-width: 599px){.mat-card-title-group{margin:0}.mat-card-xl-image{margin-left:0;margin-right:0}}.mat-card>:first-child,.mat-card-content>:first-child{margin-top:0}.mat-card>:last-child:not(.mat-card-footer),.mat-card-content>:last-child:not(.mat-card-footer){margin-bottom:0}.mat-card-image:first-child{margin-top:-16px;border-top-left-radius:inherit;border-top-right-radius:inherit}.mat-card>.mat-card-actions:last-child{margin-bottom:-8px;padding-bottom:0}.mat-card-actions .mat-button:first-child,.mat-card-actions .mat-raised-button:first-child,.mat-card-actions .mat-stroked-button:first-child{margin-left:0;margin-right:0}.mat-card-title:not(:first-child),.mat-card-subtitle:not(:first-child){margin-top:-4px}.mat-card-header .mat-card-subtitle:not(:first-child){margin-top:-8px}.mat-card>.mat-card-xl-image:first-child{margin-top:-8px}.mat-card>.mat-card-xl-image:last-child{margin-bottom:-8px}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatCard.ctorParameters = () => [\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatCard, [{\n        type: Component,\n        args: [{\n                selector: 'mat-card',\n                exportAs: 'matCard',\n                template: \"<ng-content></ng-content>\\n<ng-content select=\\\"mat-card-footer\\\"></ng-content>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: {\n                    'class': 'mat-card mat-focus-indicator',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"'\n                },\n                styles: [\".mat-card{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:block;position:relative;padding:16px;border-radius:4px}._mat-animation-noopable.mat-card{transition:none;animation:none}.mat-card .mat-divider-horizontal{position:absolute;left:0;width:100%}[dir=rtl] .mat-card .mat-divider-horizontal{left:auto;right:0}.mat-card .mat-divider-horizontal.mat-divider-inset{position:static;margin:0}[dir=rtl] .mat-card .mat-divider-horizontal.mat-divider-inset{margin-right:0}.cdk-high-contrast-active .mat-card{outline:solid 1px}.mat-card-actions,.mat-card-subtitle,.mat-card-content{display:block;margin-bottom:16px}.mat-card-title{display:block;margin-bottom:8px}.mat-card-actions{margin-left:-8px;margin-right:-8px;padding:8px 0}.mat-card-actions-align-end{display:flex;justify-content:flex-end}.mat-card-image{width:calc(100% + 32px);margin:0 -16px 16px -16px}.mat-card-footer{display:block;margin:0 -16px -16px -16px}.mat-card-actions .mat-button,.mat-card-actions .mat-raised-button,.mat-card-actions .mat-stroked-button{margin:0 8px}.mat-card-header{display:flex;flex-direction:row}.mat-card-header .mat-card-title{margin-bottom:12px}.mat-card-header-text{margin:0 16px}.mat-card-avatar{height:40px;width:40px;border-radius:50%;flex-shrink:0;object-fit:cover}.mat-card-title-group{display:flex;justify-content:space-between}.mat-card-sm-image{width:80px;height:80px}.mat-card-md-image{width:112px;height:112px}.mat-card-lg-image{width:152px;height:152px}.mat-card-xl-image{width:240px;height:240px;margin:-8px}.mat-card-title-group>.mat-card-xl-image{margin:-8px 0 8px}@media(max-width: 599px){.mat-card-title-group{margin:0}.mat-card-xl-image{margin-left:0;margin-right:0}}.mat-card>:first-child,.mat-card-content>:first-child{margin-top:0}.mat-card>:last-child:not(.mat-card-footer),.mat-card-content>:last-child:not(.mat-card-footer){margin-bottom:0}.mat-card-image:first-child{margin-top:-16px;border-top-left-radius:inherit;border-top-right-radius:inherit}.mat-card>.mat-card-actions:last-child{margin-bottom:-8px;padding-bottom:0}.mat-card-actions .mat-button:first-child,.mat-card-actions .mat-raised-button:first-child,.mat-card-actions .mat-stroked-button:first-child{margin-left:0;margin-right:0}.mat-card-title:not(:first-child),.mat-card-subtitle:not(:first-child){margin-top:-4px}.mat-card-header .mat-card-subtitle:not(:first-child){margin-top:-8px}.mat-card>.mat-card-xl-image:first-child{margin-top:-8px}.mat-card>.mat-card-xl-image:last-child{margin-bottom:-8px}\\n\"]\n            }]\n    }], function () { return [{ type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, null); })();\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\nclass MatCardHeader {\n}\nMatCardHeader.ɵfac = function MatCardHeader_Factory(t) { return new (t || MatCardHeader)(); };\nMatCardHeader.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatCardHeader, selectors: [[\"mat-card-header\"]], hostAttrs: [1, \"mat-card-header\"], ngContentSelectors: _c3, decls: 4, vars: 0, consts: [[1, \"mat-card-header-text\"]], template: function MatCardHeader_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c2);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵelementStart(1, \"div\", 0);\n        ɵngcc0.ɵɵprojection(2, 1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(3, 2);\n    } }, encapsulation: 2, changeDetection: 0 });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatCardHeader, [{\n        type: Component,\n        args: [{\n                selector: 'mat-card-header',\n                template: \"<ng-content select=\\\"[mat-card-avatar], [matCardAvatar]\\\"></ng-content>\\n<div class=\\\"mat-card-header-text\\\">\\n  <ng-content\\n      select=\\\"mat-card-title, mat-card-subtitle,\\n      [mat-card-title], [mat-card-subtitle],\\n      [matCardTitle], [matCardSubtitle]\\\"></ng-content>\\n</div>\\n<ng-content></ng-content>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: { 'class': 'mat-card-header' }\n            }]\n    }], null, null); })();\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\nclass MatCardTitleGroup {\n}\nMatCardTitleGroup.ɵfac = function MatCardTitleGroup_Factory(t) { return new (t || MatCardTitleGroup)(); };\nMatCardTitleGroup.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatCardTitleGroup, selectors: [[\"mat-card-title-group\"]], hostAttrs: [1, \"mat-card-title-group\"], ngContentSelectors: _c5, decls: 4, vars: 0, template: function MatCardTitleGroup_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c4);\n        ɵngcc0.ɵɵelementStart(0, \"div\");\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(2, 1);\n        ɵngcc0.ɵɵprojection(3, 2);\n    } }, encapsulation: 2, changeDetection: 0 });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatCardTitleGroup, [{\n        type: Component,\n        args: [{\n                selector: 'mat-card-title-group',\n                template: \"<div>\\n  <ng-content\\n      select=\\\"mat-card-title, mat-card-subtitle,\\n      [mat-card-title], [mat-card-subtitle],\\n      [matCardTitle], [matCardSubtitle]\\\"></ng-content>\\n</div>\\n<ng-content select=\\\"img\\\"></ng-content>\\n<ng-content></ng-content>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: { 'class': 'mat-card-title-group' }\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatCardModule {\n}\nMatCardModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatCardModule });\nMatCardModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatCardModule_Factory(t) { return new (t || MatCardModule)(); }, imports: [[MatCommonModule], MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatCardModule, { declarations: function () { return [MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle, MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage, MatCardXlImage, MatCardAvatar]; }, imports: function () { return [MatCommonModule]; }, exports: function () { return [MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle, MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage, MatCardXlImage, MatCardAvatar, MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatCardModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatCommonModule],\n                exports: [\n                    MatCard,\n                    MatCardHeader,\n                    MatCardTitleGroup,\n                    MatCardContent,\n                    MatCardTitle,\n                    MatCardSubtitle,\n                    MatCardActions,\n                    MatCardFooter,\n                    MatCardSmImage,\n                    MatCardMdImage,\n                    MatCardLgImage,\n                    MatCardImage,\n                    MatCardXlImage,\n                    MatCardAvatar,\n                    MatCommonModule,\n                ],\n                declarations: [\n                    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n                    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n                    MatCardXlImage, MatCardAvatar,\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatCard, MatCardActions, MatCardAvatar, MatCardContent, MatCardFooter, MatCardHeader, MatCardImage, MatCardLgImage, MatCardMdImage, MatCardModule, MatCardSmImage, MatCardSubtitle, MatCardTitle, MatCardTitleGroup, MatCardXlImage };\n\n//# sourceMappingURL=card.js.map","import { Subscriber } from '../Subscriber';\nexport function mapTo(value) {\n    return (source) => source.lift(new MapToOperator(value));\n}\nclass MapToOperator {\n    constructor(value) {\n        this.value = value;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new MapToSubscriber(subscriber, this.value));\n    }\n}\nclass MapToSubscriber extends Subscriber {\n    constructor(destination, value) {\n        super(destination);\n        this.value = value;\n    }\n    _next(x) {\n        this.destination.next(this.value);\n    }\n}\n//# sourceMappingURL=mapTo.js.map","import { Platform, PlatformModule } from '@angular/cdk/platform';\nimport { CdkScrollable, ScrollDispatcher, ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { InjectionToken, Component, ChangeDetectionStrategy, ViewEncapsulation, ChangeDetectorRef, Inject, forwardRef, ElementRef, NgZone, EventEmitter, Optional, Input, HostBinding, Output, HostListener, QueryList, ContentChildren, ContentChild, ViewChild, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { FocusTrapFactory, FocusMonitor } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { Subject, fromEvent, merge } from 'rxjs';\nimport { filter, map, mapTo, takeUntil, distinctUntilChanged, take, startWith, debounceTime } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/cdk/a11y';\nimport * as ɵngcc3 from '@angular/cdk/platform';\nimport * as ɵngcc4 from '@angular/cdk/bidi';\nimport * as ɵngcc5 from '@angular/common';\n\nconst _c0 = [\"*\"];\nfunction MatDrawerContainer_div_0_Template(rf, ctx) { if (rf & 1) {\n    const _r3 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 2);\n    ɵngcc0.ɵɵlistener(\"click\", function MatDrawerContainer_div_0_Template_div_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2._onBackdropClicked(); });\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassProp(\"mat-drawer-shown\", ctx_r0._isShowingBackdrop());\n} }\nfunction MatDrawerContainer_mat_drawer_content_3_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"mat-drawer-content\");\n    ɵngcc0.ɵɵprojection(1, 2);\n    ɵngcc0.ɵɵelementEnd();\n} }\nconst _c1 = [[[\"mat-drawer\"]], [[\"mat-drawer-content\"]], \"*\"];\nconst _c2 = [\"mat-drawer\", \"mat-drawer-content\", \"*\"];\nfunction MatSidenavContainer_div_0_Template(rf, ctx) { if (rf & 1) {\n    const _r3 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 2);\n    ɵngcc0.ɵɵlistener(\"click\", function MatSidenavContainer_div_0_Template_div_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2._onBackdropClicked(); });\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassProp(\"mat-drawer-shown\", ctx_r0._isShowingBackdrop());\n} }\nfunction MatSidenavContainer_mat_sidenav_content_3_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"mat-sidenav-content\", 3);\n    ɵngcc0.ɵɵprojection(1, 2);\n    ɵngcc0.ɵɵelementEnd();\n} }\nconst _c3 = [[[\"mat-sidenav\"]], [[\"mat-sidenav-content\"]], \"*\"];\nconst _c4 = [\"mat-sidenav\", \"mat-sidenav-content\", \"*\"];\nconst _c5 = \".mat-drawer-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}.cdk-high-contrast-active .mat-drawer-backdrop{opacity:.5}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}.cdk-high-contrast-active .mat-drawer,.cdk-high-contrast-active [dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}.cdk-high-contrast-active [dir=rtl] .mat-drawer,.cdk-high-contrast-active .mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer{transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\\n\";\nconst matDrawerAnimations = {\n    /** Animation that slides a drawer in and out. */\n    transformDrawer: trigger('transform', [\n        // We remove the `transform` here completely, rather than setting it to zero, because:\n        // 1. Having a transform can cause elements with ripples or an animated\n        //    transform to shift around in Chrome with an RTL layout (see #10023).\n        // 2. 3d transforms causes text to appear blurry on IE and Edge.\n        state('open, open-instant', style({\n            'transform': 'none',\n            'visibility': 'visible',\n        })),\n        state('void', style({\n            // Avoids the shadow showing up when closed in SSR.\n            'box-shadow': 'none',\n            'visibility': 'hidden',\n        })),\n        transition('void => open-instant', animate('0ms')),\n        transition('void <=> open, open-instant => void', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n    ])\n};\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nfunction throwMatDuplicatedDrawerError(position) {\n    throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n/** Configures whether drawers should use auto sizing by default. */\nconst MAT_DRAWER_DEFAULT_AUTOSIZE = new InjectionToken('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n    providedIn: 'root',\n    factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n});\n/**\n * Used to provide a drawer container to a drawer while avoiding circular references.\n * @docs-private\n */\nconst MAT_DRAWER_CONTAINER = new InjectionToken('MAT_DRAWER_CONTAINER');\n/** @docs-private */\nfunction MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY() {\n    return false;\n}\nclass MatDrawerContent extends CdkScrollable {\n    constructor(_changeDetectorRef, _container, elementRef, scrollDispatcher, ngZone) {\n        super(elementRef, scrollDispatcher, ngZone);\n        this._changeDetectorRef = _changeDetectorRef;\n        this._container = _container;\n    }\n    ngAfterContentInit() {\n        this._container._contentMarginChanges.subscribe(() => {\n            this._changeDetectorRef.markForCheck();\n        });\n    }\n}\nMatDrawerContent.ɵfac = function MatDrawerContent_Factory(t) { return new (t || MatDrawerContent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(forwardRef(() => MatDrawerContainer)), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\nMatDrawerContent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatDrawerContent, selectors: [[\"mat-drawer-content\"]], hostAttrs: [1, \"mat-drawer-content\"], hostVars: 4, hostBindings: function MatDrawerContent_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"margin-left\", ctx._container._contentMargins.left, \"px\")(\"margin-right\", ctx._container._contentMargins.right, \"px\");\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function MatDrawerContent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n    } }, encapsulation: 2, changeDetection: 0 });\nMatDrawerContent.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: MatDrawerContainer, decorators: [{ type: Inject, args: [forwardRef(() => MatDrawerContainer),] }] },\n    { type: ElementRef },\n    { type: ScrollDispatcher },\n    { type: NgZone }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDrawerContent, [{\n        type: Component,\n        args: [{\n                selector: 'mat-drawer-content',\n                template: '<ng-content></ng-content>',\n                host: {\n                    'class': 'mat-drawer-content',\n                    '[style.margin-left.px]': '_container._contentMargins.left',\n                    '[style.margin-right.px]': '_container._contentMargins.right'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None\n            }]\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: MatDrawerContainer, decorators: [{\n                type: Inject,\n                args: [forwardRef(() => MatDrawerContainer)]\n            }] }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.ScrollDispatcher }, { type: ɵngcc0.NgZone }]; }, null); })();\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\nclass MatDrawer {\n    constructor(_elementRef, _focusTrapFactory, _focusMonitor, _platform, _ngZone, _doc, _container) {\n        this._elementRef = _elementRef;\n        this._focusTrapFactory = _focusTrapFactory;\n        this._focusMonitor = _focusMonitor;\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._doc = _doc;\n        this._container = _container;\n        this._elementFocusedBeforeDrawerWasOpened = null;\n        /** Whether the drawer is initialized. Used for disabling the initial animation. */\n        this._enableAnimations = false;\n        this._position = 'start';\n        this._mode = 'over';\n        this._disableClose = false;\n        this._opened = false;\n        /** Emits whenever the drawer has started animating. */\n        this._animationStarted = new Subject();\n        /** Emits whenever the drawer is done animating. */\n        this._animationEnd = new Subject();\n        /** Current state of the sidenav animation. */\n        // @HostBinding is used in the class as it is expected to be extended.  Since @Component decorator\n        // metadata is not inherited by child classes, instead the host binding data is defined in a way\n        // that can be inherited.\n        // tslint:disable:no-host-decorator-in-concrete\n        this._animationState = 'void';\n        /** Event emitted when the drawer open state is changed. */\n        this.openedChange = \n        // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n        new EventEmitter(/* isAsync */ true);\n        /** Event emitted when the drawer has been opened. */\n        this._openedStream = this.openedChange.pipe(filter(o => o), map(() => { }));\n        /** Event emitted when the drawer has started opening. */\n        this.openedStart = this._animationStarted.pipe(filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0), mapTo(undefined));\n        /** Event emitted when the drawer has been closed. */\n        this._closedStream = this.openedChange.pipe(filter(o => !o), map(() => { }));\n        /** Event emitted when the drawer has started closing. */\n        this.closedStart = this._animationStarted.pipe(filter(e => e.fromState !== e.toState && e.toState === 'void'), mapTo(undefined));\n        /** Emits when the component is destroyed. */\n        this._destroyed = new Subject();\n        /** Event emitted when the drawer's position changes. */\n        // tslint:disable-next-line:no-output-on-prefix\n        this.onPositionChanged = new EventEmitter();\n        /**\n         * An observable that emits when the drawer mode changes. This is used by the drawer container to\n         * to know when to when the mode changes so it can adapt the margins on the content.\n         */\n        this._modeChanged = new Subject();\n        this.openedChange.subscribe((opened) => {\n            if (opened) {\n                if (this._doc) {\n                    this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement;\n                }\n                this._takeFocus();\n            }\n            else if (this._isFocusWithinDrawer()) {\n                this._restoreFocus();\n            }\n        });\n        /**\n         * Listen to `keydown` events outside the zone so that change detection is not run every\n         * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n         * and we don't have close disabled.\n         */\n        this._ngZone.runOutsideAngular(() => {\n            fromEvent(this._elementRef.nativeElement, 'keydown').pipe(filter(event => {\n                return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n            }), takeUntil(this._destroyed)).subscribe(event => this._ngZone.run(() => {\n                this.close();\n                event.stopPropagation();\n                event.preventDefault();\n            }));\n        });\n        // We need a Subject with distinctUntilChanged, because the `done` event\n        // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n        this._animationEnd.pipe(distinctUntilChanged((x, y) => {\n            return x.fromState === y.fromState && x.toState === y.toState;\n        })).subscribe((event) => {\n            const { fromState, toState } = event;\n            if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n                (toState === 'void' && fromState.indexOf('open') === 0)) {\n                this.openedChange.emit(this._opened);\n            }\n        });\n    }\n    /** The side that the drawer is attached to. */\n    get position() { return this._position; }\n    set position(value) {\n        // Make sure we have a valid value.\n        value = value === 'end' ? 'end' : 'start';\n        if (value != this._position) {\n            this._position = value;\n            this.onPositionChanged.emit();\n        }\n    }\n    /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n    get mode() { return this._mode; }\n    set mode(value) {\n        this._mode = value;\n        this._updateFocusTrapState();\n        this._modeChanged.next();\n    }\n    /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n    get disableClose() { return this._disableClose; }\n    set disableClose(value) { this._disableClose = coerceBooleanProperty(value); }\n    /**\n     * Whether the drawer should focus the first focusable element automatically when opened.\n     * Defaults to false in when `mode` is set to `side`, otherwise defaults to `true`. If explicitly\n     * enabled, focus will be moved into the sidenav in `side` mode as well.\n     */\n    get autoFocus() {\n        const value = this._autoFocus;\n        // Note that usually we disable auto focusing in `side` mode, because we don't know how the\n        // sidenav is being used, but in some cases it still makes sense to do it. If the consumer\n        // explicitly enabled `autoFocus`, we take it as them always wanting to enable it.\n        return value == null ? this.mode !== 'side' : value;\n    }\n    set autoFocus(value) { this._autoFocus = coerceBooleanProperty(value); }\n    /**\n     * Whether the drawer is opened. We overload this because we trigger an event when it\n     * starts or end.\n     */\n    get opened() { return this._opened; }\n    set opened(value) { this.toggle(coerceBooleanProperty(value)); }\n    /**\n     * Moves focus into the drawer. Note that this works even if\n     * the focus trap is disabled in `side` mode.\n     */\n    _takeFocus() {\n        if (!this.autoFocus || !this._focusTrap) {\n            return;\n        }\n        this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n            // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n            // still works. We need to check that `focus` is a function due to Universal.\n            if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n                this._elementRef.nativeElement.focus();\n            }\n        });\n    }\n    /**\n     * Restores focus to the element that was originally focused when the drawer opened.\n     * If no element was focused at that time, the focus will be restored to the drawer.\n     */\n    _restoreFocus() {\n        if (!this.autoFocus) {\n            return;\n        }\n        // Note that we don't check via `instanceof HTMLElement` so that we can cover SVGs as well.\n        if (this._elementFocusedBeforeDrawerWasOpened) {\n            this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n        }\n        else {\n            this._elementRef.nativeElement.blur();\n        }\n        this._elementFocusedBeforeDrawerWasOpened = null;\n        this._openedVia = null;\n    }\n    /** Whether focus is currently within the drawer. */\n    _isFocusWithinDrawer() {\n        var _a;\n        const activeEl = (_a = this._doc) === null || _a === void 0 ? void 0 : _a.activeElement;\n        return !!activeEl && this._elementRef.nativeElement.contains(activeEl);\n    }\n    ngAfterContentInit() {\n        this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n        this._updateFocusTrapState();\n    }\n    ngAfterContentChecked() {\n        // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n        // drawers that are open by default. When we're on the server, we shouldn't enable the\n        // animations, because we don't want the drawer to animate the first time the user sees\n        // the page.\n        if (this._platform.isBrowser) {\n            this._enableAnimations = true;\n        }\n    }\n    ngOnDestroy() {\n        if (this._focusTrap) {\n            this._focusTrap.destroy();\n        }\n        this._animationStarted.complete();\n        this._animationEnd.complete();\n        this._modeChanged.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Open the drawer.\n     * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n     * Used for focus management after the sidenav is closed.\n     */\n    open(openedVia) {\n        return this.toggle(true, openedVia);\n    }\n    /** Close the drawer. */\n    close() {\n        return this.toggle(false);\n    }\n    /** Closes the drawer with context that the backdrop was clicked. */\n    _closeViaBackdropClick() {\n        // If the drawer is closed upon a backdrop click, we always want to restore focus. We\n        // don't need to check whether focus is currently in the drawer, as clicking on the\n        // backdrop causes blurring of the active element.\n        return this._setOpen(/* isOpen */ false, /* restoreFocus */ true);\n    }\n    /**\n     * Toggle this drawer.\n     * @param isOpen Whether the drawer should be open.\n     * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n     * Used for focus management after the sidenav is closed.\n     */\n    toggle(isOpen = !this.opened, openedVia) {\n        // If the focus is currently inside the drawer content and we are closing the drawer,\n        // restore the focus to the initially focused element (when the drawer opened).\n        return this._setOpen(isOpen, /* restoreFocus */ !isOpen && this._isFocusWithinDrawer(), openedVia);\n    }\n    /**\n     * Toggles the opened state of the drawer.\n     * @param isOpen Whether the drawer should open or close.\n     * @param restoreFocus Whether focus should be restored on close.\n     * @param openedVia Focus origin that can be optionally set when opening a drawer. The\n     *   origin will be used later when focus is restored on drawer close.\n     */\n    _setOpen(isOpen, restoreFocus, openedVia = 'program') {\n        this._opened = isOpen;\n        if (isOpen) {\n            this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n            this._openedVia = openedVia;\n        }\n        else {\n            this._animationState = 'void';\n            if (restoreFocus) {\n                this._restoreFocus();\n            }\n        }\n        this._updateFocusTrapState();\n        return new Promise(resolve => {\n            this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n        });\n    }\n    _getWidth() {\n        return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n    }\n    /** Updates the enabled state of the focus trap. */\n    _updateFocusTrapState() {\n        if (this._focusTrap) {\n            // The focus trap is only enabled when the drawer is open in any mode other than side.\n            this._focusTrap.enabled = this.opened && this.mode !== 'side';\n        }\n    }\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _animationStartListener(event) {\n        this._animationStarted.next(event);\n    }\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _animationDoneListener(event) {\n        this._animationEnd.next(event);\n    }\n}\nMatDrawer.ɵfac = function MatDrawer_Factory(t) { return new (t || MatDrawer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.FocusTrapFactory), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(MAT_DRAWER_CONTAINER, 8)); };\nMatDrawer.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatDrawer, selectors: [[\"mat-drawer\"]], hostAttrs: [\"tabIndex\", \"-1\", 1, \"mat-drawer\"], hostVars: 12, hostBindings: function MatDrawer_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵsyntheticHostListener(\"@transform.start\", function MatDrawer_animation_transform_start_HostBindingHandler($event) { return ctx._animationStartListener($event); })(\"@transform.done\", function MatDrawer_animation_transform_done_HostBindingHandler($event) { return ctx._animationDoneListener($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"align\", null);\n        ɵngcc0.ɵɵsyntheticHostProperty(\"@transform\", ctx._animationState);\n        ɵngcc0.ɵɵclassProp(\"mat-drawer-end\", ctx.position === \"end\")(\"mat-drawer-over\", ctx.mode === \"over\")(\"mat-drawer-push\", ctx.mode === \"push\")(\"mat-drawer-side\", ctx.mode === \"side\")(\"mat-drawer-opened\", ctx.opened);\n    } }, inputs: { position: \"position\", mode: \"mode\", disableClose: \"disableClose\", autoFocus: \"autoFocus\", opened: \"opened\" }, outputs: { openedChange: \"openedChange\", _openedStream: \"opened\", openedStart: \"openedStart\", _closedStream: \"closed\", closedStart: \"closedStart\", onPositionChanged: \"positionChanged\" }, exportAs: [\"matDrawer\"], ngContentSelectors: _c0, decls: 2, vars: 0, consts: [[1, \"mat-drawer-inner-container\"]], template: function MatDrawer_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n    } }, encapsulation: 2, data: { animation: [matDrawerAnimations.transformDrawer] }, changeDetection: 0 });\nMatDrawer.ctorParameters = () => [\n    { type: ElementRef },\n    { type: FocusTrapFactory },\n    { type: FocusMonitor },\n    { type: Platform },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: MatDrawerContainer, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DRAWER_CONTAINER,] }] }\n];\nMatDrawer.propDecorators = {\n    position: [{ type: Input }],\n    mode: [{ type: Input }],\n    disableClose: [{ type: Input }],\n    autoFocus: [{ type: Input }],\n    opened: [{ type: Input }],\n    _animationState: [{ type: HostBinding, args: ['@transform',] }],\n    openedChange: [{ type: Output }],\n    _openedStream: [{ type: Output, args: ['opened',] }],\n    openedStart: [{ type: Output }],\n    _closedStream: [{ type: Output, args: ['closed',] }],\n    closedStart: [{ type: Output }],\n    onPositionChanged: [{ type: Output, args: ['positionChanged',] }],\n    _animationStartListener: [{ type: HostListener, args: ['@transform.start', ['$event'],] }],\n    _animationDoneListener: [{ type: HostListener, args: ['@transform.done', ['$event'],] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDrawer, [{\n        type: Component,\n        args: [{\n                selector: 'mat-drawer',\n                exportAs: 'matDrawer',\n                template: \"<div class=\\\"mat-drawer-inner-container\\\">\\r\\n  <ng-content></ng-content>\\r\\n</div>\\r\\n\",\n                animations: [matDrawerAnimations.transformDrawer],\n                host: {\n                    'class': 'mat-drawer',\n                    // must prevent the browser from aligning text based on value\n                    '[attr.align]': 'null',\n                    '[class.mat-drawer-end]': 'position === \"end\"',\n                    '[class.mat-drawer-over]': 'mode === \"over\"',\n                    '[class.mat-drawer-push]': 'mode === \"push\"',\n                    '[class.mat-drawer-side]': 'mode === \"side\"',\n                    '[class.mat-drawer-opened]': 'opened',\n                    'tabIndex': '-1'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc2.FocusTrapFactory }, { type: ɵngcc2.FocusMonitor }, { type: ɵngcc3.Platform }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: MatDrawerContainer, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_DRAWER_CONTAINER]\n            }] }]; }, { _animationState: [{\n            type: HostBinding,\n            args: ['@transform']\n        }], openedChange: [{\n            type: Output\n        }], _openedStream: [{\n            type: Output,\n            args: ['opened']\n        }], openedStart: [{\n            type: Output\n        }], _closedStream: [{\n            type: Output,\n            args: ['closed']\n        }], closedStart: [{\n            type: Output\n        }], onPositionChanged: [{\n            type: Output,\n            args: ['positionChanged']\n        }], position: [{\n            type: Input\n        }], mode: [{\n            type: Input\n        }], disableClose: [{\n            type: Input\n        }], autoFocus: [{\n            type: Input\n        }], opened: [{\n            type: Input\n        }], \n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _animationStartListener: [{\n            type: HostListener,\n            args: ['@transform.start', ['$event']]\n        }], \n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _animationDoneListener: [{\n            type: HostListener,\n            args: ['@transform.done', ['$event']]\n        }] }); })();\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\nclass MatDrawerContainer {\n    constructor(_dir, _element, _ngZone, _changeDetectorRef, viewportRuler, defaultAutosize = false, _animationMode) {\n        this._dir = _dir;\n        this._element = _element;\n        this._ngZone = _ngZone;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._animationMode = _animationMode;\n        /** Drawers that belong to this container. */\n        this._drawers = new QueryList();\n        /** Event emitted when the drawer backdrop is clicked. */\n        this.backdropClick = new EventEmitter();\n        /** Emits when the component is destroyed. */\n        this._destroyed = new Subject();\n        /** Emits on every ngDoCheck. Used for debouncing reflows. */\n        this._doCheckSubject = new Subject();\n        /**\n         * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n         * drawer is open. We use margin rather than transform even for push mode because transform breaks\n         * fixed position elements inside of the transformed element.\n         */\n        this._contentMargins = { left: null, right: null };\n        this._contentMarginChanges = new Subject();\n        // If a `Dir` directive exists up the tree, listen direction changes\n        // and update the left/right properties to point to the proper start/end.\n        if (_dir) {\n            _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n                this._validateDrawers();\n                this.updateContentMargins();\n            });\n        }\n        // Since the minimum width of the sidenav depends on the viewport width,\n        // we need to recompute the margins if the viewport changes.\n        viewportRuler.change()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this.updateContentMargins());\n        this._autosize = defaultAutosize;\n    }\n    /** The drawer child with the `start` position. */\n    get start() { return this._start; }\n    /** The drawer child with the `end` position. */\n    get end() { return this._end; }\n    /**\n     * Whether to automatically resize the container whenever\n     * the size of any of its drawers changes.\n     *\n     * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n     * the drawers on every change detection cycle. Can be configured globally via the\n     * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n     */\n    get autosize() { return this._autosize; }\n    set autosize(value) { this._autosize = coerceBooleanProperty(value); }\n    /**\n     * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n     * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n     * mode as well.\n     */\n    get hasBackdrop() {\n        if (this._backdropOverride == null) {\n            return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n        }\n        return this._backdropOverride;\n    }\n    set hasBackdrop(value) {\n        this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n    }\n    /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n    get scrollable() {\n        return this._userContent || this._content;\n    }\n    ngAfterContentInit() {\n        this._allDrawers.changes\n            .pipe(startWith(this._allDrawers), takeUntil(this._destroyed))\n            .subscribe((drawer) => {\n            this._drawers.reset(drawer.filter(item => !item._container || item._container === this));\n            this._drawers.notifyOnChanges();\n        });\n        this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n            this._validateDrawers();\n            this._drawers.forEach((drawer) => {\n                this._watchDrawerToggle(drawer);\n                this._watchDrawerPosition(drawer);\n                this._watchDrawerMode(drawer);\n            });\n            if (!this._drawers.length ||\n                this._isDrawerOpen(this._start) ||\n                this._isDrawerOpen(this._end)) {\n                this.updateContentMargins();\n            }\n            this._changeDetectorRef.markForCheck();\n        });\n        // Avoid hitting the NgZone through the debounce timeout.\n        this._ngZone.runOutsideAngular(() => {\n            this._doCheckSubject.pipe(debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n            takeUntil(this._destroyed)).subscribe(() => this.updateContentMargins());\n        });\n    }\n    ngOnDestroy() {\n        this._contentMarginChanges.complete();\n        this._doCheckSubject.complete();\n        this._drawers.destroy();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Calls `open` of both start and end drawers */\n    open() {\n        this._drawers.forEach(drawer => drawer.open());\n    }\n    /** Calls `close` of both start and end drawers */\n    close() {\n        this._drawers.forEach(drawer => drawer.close());\n    }\n    /**\n     * Recalculates and updates the inline styles for the content. Note that this should be used\n     * sparingly, because it causes a reflow.\n     */\n    updateContentMargins() {\n        // 1. For drawers in `over` mode, they don't affect the content.\n        // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n        //    left margin (for left drawer) or right margin (for right the drawer).\n        // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n        //    adding to the left or right margin and simultaneously subtracting the same amount of\n        //    margin from the other side.\n        let left = 0;\n        let right = 0;\n        if (this._left && this._left.opened) {\n            if (this._left.mode == 'side') {\n                left += this._left._getWidth();\n            }\n            else if (this._left.mode == 'push') {\n                const width = this._left._getWidth();\n                left += width;\n                right -= width;\n            }\n        }\n        if (this._right && this._right.opened) {\n            if (this._right.mode == 'side') {\n                right += this._right._getWidth();\n            }\n            else if (this._right.mode == 'push') {\n                const width = this._right._getWidth();\n                right += width;\n                left -= width;\n            }\n        }\n        // If either `right` or `left` is zero, don't set a style to the element. This\n        // allows users to specify a custom size via CSS class in SSR scenarios where the\n        // measured widths will always be zero. Note that we reset to `null` here, rather\n        // than below, in order to ensure that the types in the `if` below are consistent.\n        left = left || null;\n        right = right || null;\n        if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n            this._contentMargins = { left, right };\n            // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n            // to do it only when something changed, otherwise we can end up hitting the zone too often.\n            this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n        }\n    }\n    ngDoCheck() {\n        // If users opted into autosizing, do a check every change detection cycle.\n        if (this._autosize && this._isPushed()) {\n            // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n            this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n        }\n    }\n    /**\n     * Subscribes to drawer events in order to set a class on the main container element when the\n     * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n     * is properly hidden.\n     */\n    _watchDrawerToggle(drawer) {\n        drawer._animationStarted.pipe(filter((event) => event.fromState !== event.toState), takeUntil(this._drawers.changes))\n            .subscribe((event) => {\n            // Set the transition class on the container so that the animations occur. This should not\n            // be set initially because animations should only be triggered via a change in state.\n            if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n                this._element.nativeElement.classList.add('mat-drawer-transition');\n            }\n            this.updateContentMargins();\n            this._changeDetectorRef.markForCheck();\n        });\n        if (drawer.mode !== 'side') {\n            drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() => this._setContainerClass(drawer.opened));\n        }\n    }\n    /**\n     * Subscribes to drawer onPositionChanged event in order to\n     * re-validate drawers when the position changes.\n     */\n    _watchDrawerPosition(drawer) {\n        if (!drawer) {\n            return;\n        }\n        // NOTE: We need to wait for the microtask queue to be empty before validating,\n        // since both drawers may be swapping positions at the same time.\n        drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n            this._ngZone.onMicrotaskEmpty.pipe(take(1)).subscribe(() => {\n                this._validateDrawers();\n            });\n        });\n    }\n    /** Subscribes to changes in drawer mode so we can run change detection. */\n    _watchDrawerMode(drawer) {\n        if (drawer) {\n            drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n                .subscribe(() => {\n                this.updateContentMargins();\n                this._changeDetectorRef.markForCheck();\n            });\n        }\n    }\n    /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n    _setContainerClass(isAdd) {\n        const classList = this._element.nativeElement.classList;\n        const className = 'mat-drawer-container-has-open';\n        if (isAdd) {\n            classList.add(className);\n        }\n        else {\n            classList.remove(className);\n        }\n    }\n    /** Validate the state of the drawer children components. */\n    _validateDrawers() {\n        this._start = this._end = null;\n        // Ensure that we have at most one start and one end drawer.\n        this._drawers.forEach(drawer => {\n            if (drawer.position == 'end') {\n                if (this._end != null && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                    throwMatDuplicatedDrawerError('end');\n                }\n                this._end = drawer;\n            }\n            else {\n                if (this._start != null && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                    throwMatDuplicatedDrawerError('start');\n                }\n                this._start = drawer;\n            }\n        });\n        this._right = this._left = null;\n        // Detect if we're LTR or RTL.\n        if (this._dir && this._dir.value === 'rtl') {\n            this._left = this._end;\n            this._right = this._start;\n        }\n        else {\n            this._left = this._start;\n            this._right = this._end;\n        }\n    }\n    /** Whether the container is being pushed to the side by one of the drawers. */\n    _isPushed() {\n        return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n            (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n    }\n    _onBackdropClicked() {\n        this.backdropClick.emit();\n        this._closeModalDrawersViaBackdrop();\n    }\n    _closeModalDrawersViaBackdrop() {\n        // Close all open drawers where closing is not disabled and the mode is not `side`.\n        [this._start, this._end]\n            .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n            .forEach(drawer => drawer._closeViaBackdropClick());\n    }\n    _isShowingBackdrop() {\n        return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n            (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n    }\n    _canHaveBackdrop(drawer) {\n        return drawer.mode !== 'side' || !!this._backdropOverride;\n    }\n    _isDrawerOpen(drawer) {\n        return drawer != null && drawer.opened;\n    }\n}\nMatDrawerContainer.ɵfac = function MatDrawerContainer_Factory(t) { return new (t || MatDrawerContainer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc4.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(MAT_DRAWER_DEFAULT_AUTOSIZE), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\nMatDrawerContainer.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatDrawerContainer, selectors: [[\"mat-drawer-container\"]], contentQueries: function MatDrawerContainer_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatDrawerContent, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatDrawer, true);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._content = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._allDrawers = _t);\n    } }, viewQuery: function MatDrawerContainer_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(MatDrawerContent, true);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._userContent = _t.first);\n    } }, hostAttrs: [1, \"mat-drawer-container\"], hostVars: 2, hostBindings: function MatDrawerContainer_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-drawer-container-explicit-backdrop\", ctx._backdropOverride);\n    } }, inputs: { autosize: \"autosize\", hasBackdrop: \"hasBackdrop\" }, outputs: { backdropClick: \"backdropClick\" }, exportAs: [\"matDrawerContainer\"], features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: MAT_DRAWER_CONTAINER,\n                useExisting: MatDrawerContainer\n            }])], ngContentSelectors: _c2, decls: 4, vars: 2, consts: [[\"class\", \"mat-drawer-backdrop\", 3, \"mat-drawer-shown\", \"click\", 4, \"ngIf\"], [4, \"ngIf\"], [1, \"mat-drawer-backdrop\", 3, \"click\"]], template: function MatDrawerContainer_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c1);\n        ɵngcc0.ɵɵtemplate(0, MatDrawerContainer_div_0_Template, 1, 2, \"div\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵprojection(2, 1);\n        ɵngcc0.ɵɵtemplate(3, MatDrawerContainer_mat_drawer_content_3_Template, 2, 0, \"mat-drawer-content\", 1);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.hasBackdrop);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx._content);\n    } }, directives: [ɵngcc5.NgIf, MatDrawerContent], styles: [_c5], encapsulation: 2, changeDetection: 0 });\nMatDrawerContainer.ctorParameters = () => [\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: ElementRef },\n    { type: NgZone },\n    { type: ChangeDetectorRef },\n    { type: ViewportRuler },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_DRAWER_DEFAULT_AUTOSIZE,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatDrawerContainer.propDecorators = {\n    _allDrawers: [{ type: ContentChildren, args: [MatDrawer, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                },] }],\n    _content: [{ type: ContentChild, args: [MatDrawerContent,] }],\n    _userContent: [{ type: ViewChild, args: [MatDrawerContent,] }],\n    autosize: [{ type: Input }],\n    hasBackdrop: [{ type: Input }],\n    backdropClick: [{ type: Output }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDrawerContainer, [{\n        type: Component,\n        args: [{\n                selector: 'mat-drawer-container',\n                exportAs: 'matDrawerContainer',\n                template: \"<div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\" *ngIf=\\\"hasBackdrop\\\"\\n     [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div>\\n\\n<ng-content select=\\\"mat-drawer\\\"></ng-content>\\n\\n<ng-content select=\\\"mat-drawer-content\\\">\\n</ng-content>\\n<mat-drawer-content *ngIf=\\\"!_content\\\">\\n  <ng-content></ng-content>\\n</mat-drawer-content>\\n\",\n                host: {\n                    'class': 'mat-drawer-container',\n                    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                providers: [{\n                        provide: MAT_DRAWER_CONTAINER,\n                        useExisting: MatDrawerContainer\n                    }],\n                styles: [\".mat-drawer-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}.cdk-high-contrast-active .mat-drawer-backdrop{opacity:.5}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}.cdk-high-contrast-active .mat-drawer,.cdk-high-contrast-active [dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}.cdk-high-contrast-active [dir=rtl] .mat-drawer,.cdk-high-contrast-active .mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer{transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc4.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.ViewportRuler }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_DRAWER_DEFAULT_AUTOSIZE]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, { backdropClick: [{\n            type: Output\n        }], autosize: [{\n            type: Input\n        }], hasBackdrop: [{\n            type: Input\n        }], _allDrawers: [{\n            type: ContentChildren,\n            args: [MatDrawer, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                }]\n        }], _content: [{\n            type: ContentChild,\n            args: [MatDrawerContent]\n        }], _userContent: [{\n            type: ViewChild,\n            args: [MatDrawerContent]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSidenavContent extends MatDrawerContent {\n    constructor(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone) {\n        super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n    }\n}\nMatSidenavContent.ɵfac = function MatSidenavContent_Factory(t) { return new (t || MatSidenavContent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(forwardRef(() => MatSidenavContainer)), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\nMatSidenavContent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatSidenavContent, selectors: [[\"mat-sidenav-content\"]], hostAttrs: [1, \"mat-drawer-content\", \"mat-sidenav-content\"], hostVars: 4, hostBindings: function MatSidenavContent_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"margin-left\", ctx._container._contentMargins.left, \"px\")(\"margin-right\", ctx._container._contentMargins.right, \"px\");\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function MatSidenavContent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n    } }, encapsulation: 2, changeDetection: 0 });\nMatSidenavContent.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: MatSidenavContainer, decorators: [{ type: Inject, args: [forwardRef(() => MatSidenavContainer),] }] },\n    { type: ElementRef },\n    { type: ScrollDispatcher },\n    { type: NgZone }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSidenavContent, [{\n        type: Component,\n        args: [{\n                selector: 'mat-sidenav-content',\n                template: '<ng-content></ng-content>',\n                host: {\n                    'class': 'mat-drawer-content mat-sidenav-content',\n                    '[style.margin-left.px]': '_container._contentMargins.left',\n                    '[style.margin-right.px]': '_container._contentMargins.right'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None\n            }]\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: MatSidenavContainer, decorators: [{\n                type: Inject,\n                args: [forwardRef(() => MatSidenavContainer)]\n            }] }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.ScrollDispatcher }, { type: ɵngcc0.NgZone }]; }, null); })();\nclass MatSidenav extends MatDrawer {\n    constructor() {\n        super(...arguments);\n        this._fixedInViewport = false;\n        this._fixedTopGap = 0;\n        this._fixedBottomGap = 0;\n    }\n    /** Whether the sidenav is fixed in the viewport. */\n    get fixedInViewport() { return this._fixedInViewport; }\n    set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n    /**\n     * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n     * mode.\n     */\n    get fixedTopGap() { return this._fixedTopGap; }\n    set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n    /**\n     * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n     * fixed mode.\n     */\n    get fixedBottomGap() { return this._fixedBottomGap; }\n    set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n}\nMatSidenav.ɵfac = function MatSidenav_Factory(t) { return ɵMatSidenav_BaseFactory(t || MatSidenav); };\nMatSidenav.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatSidenav, selectors: [[\"mat-sidenav\"]], hostAttrs: [\"tabIndex\", \"-1\", 1, \"mat-drawer\", \"mat-sidenav\"], hostVars: 17, hostBindings: function MatSidenav_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"align\", null);\n        ɵngcc0.ɵɵstyleProp(\"top\", ctx.fixedInViewport ? ctx.fixedTopGap : null, \"px\")(\"bottom\", ctx.fixedInViewport ? ctx.fixedBottomGap : null, \"px\");\n        ɵngcc0.ɵɵclassProp(\"mat-drawer-end\", ctx.position === \"end\")(\"mat-drawer-over\", ctx.mode === \"over\")(\"mat-drawer-push\", ctx.mode === \"push\")(\"mat-drawer-side\", ctx.mode === \"side\")(\"mat-drawer-opened\", ctx.opened)(\"mat-sidenav-fixed\", ctx.fixedInViewport);\n    } }, inputs: { fixedInViewport: \"fixedInViewport\", fixedTopGap: \"fixedTopGap\", fixedBottomGap: \"fixedBottomGap\" }, exportAs: [\"matSidenav\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0, decls: 2, vars: 0, consts: [[1, \"mat-drawer-inner-container\"]], template: function MatSidenav_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n    } }, encapsulation: 2, data: { animation: [matDrawerAnimations.transformDrawer] }, changeDetection: 0 });\nMatSidenav.propDecorators = {\n    fixedInViewport: [{ type: Input }],\n    fixedTopGap: [{ type: Input }],\n    fixedBottomGap: [{ type: Input }]\n};\nconst ɵMatSidenav_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(MatSidenav);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSidenav, [{\n        type: Component,\n        args: [{\n                selector: 'mat-sidenav',\n                exportAs: 'matSidenav',\n                template: \"<div class=\\\"mat-drawer-inner-container\\\">\\r\\n  <ng-content></ng-content>\\r\\n</div>\\r\\n\",\n                animations: [matDrawerAnimations.transformDrawer],\n                host: {\n                    'class': 'mat-drawer mat-sidenav',\n                    'tabIndex': '-1',\n                    // must prevent the browser from aligning text based on value\n                    '[attr.align]': 'null',\n                    '[class.mat-drawer-end]': 'position === \"end\"',\n                    '[class.mat-drawer-over]': 'mode === \"over\"',\n                    '[class.mat-drawer-push]': 'mode === \"push\"',\n                    '[class.mat-drawer-side]': 'mode === \"side\"',\n                    '[class.mat-drawer-opened]': 'opened',\n                    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n                    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n                    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None\n            }]\n    }], null, { fixedInViewport: [{\n            type: Input\n        }], fixedTopGap: [{\n            type: Input\n        }], fixedBottomGap: [{\n            type: Input\n        }] }); })();\nclass MatSidenavContainer extends MatDrawerContainer {\n}\nMatSidenavContainer.ɵfac = function MatSidenavContainer_Factory(t) { return ɵMatSidenavContainer_BaseFactory(t || MatSidenavContainer); };\nMatSidenavContainer.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatSidenavContainer, selectors: [[\"mat-sidenav-container\"]], contentQueries: function MatSidenavContainer_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatSidenavContent, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatSidenav, true);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._content = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._allDrawers = _t);\n    } }, hostAttrs: [1, \"mat-drawer-container\", \"mat-sidenav-container\"], hostVars: 2, hostBindings: function MatSidenavContainer_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-drawer-container-explicit-backdrop\", ctx._backdropOverride);\n    } }, exportAs: [\"matSidenavContainer\"], features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: MAT_DRAWER_CONTAINER,\n                useExisting: MatSidenavContainer\n            }]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c4, decls: 4, vars: 2, consts: [[\"class\", \"mat-drawer-backdrop\", 3, \"mat-drawer-shown\", \"click\", 4, \"ngIf\"], [\"cdkScrollable\", \"\", 4, \"ngIf\"], [1, \"mat-drawer-backdrop\", 3, \"click\"], [\"cdkScrollable\", \"\"]], template: function MatSidenavContainer_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c3);\n        ɵngcc0.ɵɵtemplate(0, MatSidenavContainer_div_0_Template, 1, 2, \"div\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵprojection(2, 1);\n        ɵngcc0.ɵɵtemplate(3, MatSidenavContainer_mat_sidenav_content_3_Template, 2, 0, \"mat-sidenav-content\", 1);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.hasBackdrop);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx._content);\n    } }, directives: [ɵngcc5.NgIf, MatSidenavContent, ɵngcc1.CdkScrollable], styles: [_c5], encapsulation: 2, changeDetection: 0 });\nMatSidenavContainer.propDecorators = {\n    _allDrawers: [{ type: ContentChildren, args: [MatSidenav, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                },] }],\n    _content: [{ type: ContentChild, args: [MatSidenavContent,] }]\n};\nconst ɵMatSidenavContainer_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(MatSidenavContainer);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSidenavContainer, [{\n        type: Component,\n        args: [{\n                selector: 'mat-sidenav-container',\n                exportAs: 'matSidenavContainer',\n                template: \"<div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\" *ngIf=\\\"hasBackdrop\\\"\\n     [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div>\\n\\n<ng-content select=\\\"mat-sidenav\\\"></ng-content>\\n\\n<ng-content select=\\\"mat-sidenav-content\\\">\\n</ng-content>\\n<mat-sidenav-content *ngIf=\\\"!_content\\\" cdkScrollable>\\n  <ng-content></ng-content>\\n</mat-sidenav-content>\\n\",\n                host: {\n                    'class': 'mat-drawer-container mat-sidenav-container',\n                    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                providers: [{\n                        provide: MAT_DRAWER_CONTAINER,\n                        useExisting: MatSidenavContainer\n                    }],\n                styles: [\".mat-drawer-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}.cdk-high-contrast-active .mat-drawer-backdrop{opacity:.5}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}.cdk-high-contrast-active .mat-drawer,.cdk-high-contrast-active [dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}.cdk-high-contrast-active [dir=rtl] .mat-drawer,.cdk-high-contrast-active .mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer{transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\\n\"]\n            }]\n    }], null, { _allDrawers: [{\n            type: ContentChildren,\n            args: [MatSidenav, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                }]\n        }], _content: [{\n            type: ContentChild,\n            args: [MatSidenavContent]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSidenavModule {\n}\nMatSidenavModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatSidenavModule });\nMatSidenavModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatSidenavModule_Factory(t) { return new (t || MatSidenavModule)(); }, imports: [[\n            CommonModule,\n            MatCommonModule,\n            PlatformModule,\n            CdkScrollableModule,\n        ], CdkScrollableModule,\n        MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSidenavModule, { declarations: function () { return [MatDrawer, MatDrawerContainer, MatDrawerContent, MatSidenav, MatSidenavContainer, MatSidenavContent]; }, imports: function () { return [CommonModule,\n        MatCommonModule,\n        PlatformModule,\n        CdkScrollableModule]; }, exports: function () { return [CdkScrollableModule,\n        MatCommonModule, MatDrawer, MatDrawerContainer, MatDrawerContent, MatSidenav, MatSidenavContainer, MatSidenavContent]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSidenavModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CommonModule,\n                    MatCommonModule,\n                    PlatformModule,\n                    CdkScrollableModule,\n                ],\n                exports: [\n                    CdkScrollableModule,\n                    MatCommonModule,\n                    MatDrawer,\n                    MatDrawerContainer,\n                    MatDrawerContent,\n                    MatSidenav,\n                    MatSidenavContainer,\n                    MatSidenavContent,\n                ],\n                declarations: [\n                    MatDrawer,\n                    MatDrawerContainer,\n                    MatDrawerContent,\n                    MatSidenav,\n                    MatSidenavContainer,\n                    MatSidenavContent,\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_DRAWER_DEFAULT_AUTOSIZE, MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY, MatDrawer, MatDrawerContainer, MatDrawerContent, MatSidenav, MatSidenavContainer, MatSidenavContent, MatSidenavModule, matDrawerAnimations, throwMatDuplicatedDrawerError, MAT_DRAWER_CONTAINER as ɵangular_material_src_material_sidenav_sidenav_a };\n\n//# sourceMappingURL=sidenav.js.map","import { Component, ViewEncapsulation, ChangeDetectionStrategy, Input, NgModule } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { MatCommonModule } from '@angular/material/core';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as ɵngcc0 from '@angular/core';\nclass MatDivider {\n    constructor() {\n        this._vertical = false;\n        this._inset = false;\n    }\n    /** Whether the divider is vertically aligned. */\n    get vertical() { return this._vertical; }\n    set vertical(value) { this._vertical = coerceBooleanProperty(value); }\n    /** Whether the divider is an inset divider. */\n    get inset() { return this._inset; }\n    set inset(value) { this._inset = coerceBooleanProperty(value); }\n}\nMatDivider.ɵfac = function MatDivider_Factory(t) { return new (t || MatDivider)(); };\nMatDivider.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatDivider, selectors: [[\"mat-divider\"]], hostAttrs: [\"role\", \"separator\", 1, \"mat-divider\"], hostVars: 7, hostBindings: function MatDivider_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-orientation\", ctx.vertical ? \"vertical\" : \"horizontal\");\n        ɵngcc0.ɵɵclassProp(\"mat-divider-vertical\", ctx.vertical)(\"mat-divider-horizontal\", !ctx.vertical)(\"mat-divider-inset\", ctx.inset);\n    } }, inputs: { vertical: \"vertical\", inset: \"inset\" }, decls: 0, vars: 0, template: function MatDivider_Template(rf, ctx) { }, styles: [\".mat-divider{display:block;margin:0;border-top-width:1px;border-top-style:solid}.mat-divider.mat-divider-vertical{border-top:0;border-right-width:1px;border-right-style:solid}.mat-divider.mat-divider-inset{margin-left:80px}[dir=rtl] .mat-divider.mat-divider-inset{margin-left:auto;margin-right:80px}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatDivider.propDecorators = {\n    vertical: [{ type: Input }],\n    inset: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDivider, [{\n        type: Component,\n        args: [{\n                selector: 'mat-divider',\n                host: {\n                    'role': 'separator',\n                    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n                    '[class.mat-divider-vertical]': 'vertical',\n                    '[class.mat-divider-horizontal]': '!vertical',\n                    '[class.mat-divider-inset]': 'inset',\n                    'class': 'mat-divider'\n                },\n                template: '',\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-divider{display:block;margin:0;border-top-width:1px;border-top-style:solid}.mat-divider.mat-divider-vertical{border-top:0;border-right-width:1px;border-right-style:solid}.mat-divider.mat-divider-inset{margin-left:80px}[dir=rtl] .mat-divider.mat-divider-inset{margin-left:auto;margin-right:80px}\\n\"]\n            }]\n    }], function () { return []; }, { vertical: [{\n            type: Input\n        }], inset: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatDividerModule {\n}\nMatDividerModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatDividerModule });\nMatDividerModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatDividerModule_Factory(t) { return new (t || MatDividerModule)(); }, imports: [[MatCommonModule], MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatDividerModule, { declarations: function () { return [MatDivider]; }, imports: function () { return [MatCommonModule]; }, exports: function () { return [MatDivider, MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDividerModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatCommonModule],\n                exports: [MatDivider, MatCommonModule],\n                declarations: [MatDivider]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatDivider, MatDividerModule };\n\n//# sourceMappingURL=divider.js.map","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DbService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  experience() {\r\n    return this.all().pipe(map(e => e.experiences));\r\n  }\r\n\r\n  projects() {\r\n    return this.all().pipe(map(e => e.projects.sort((a, b) => b.id - a.id)));\r\n  }\r\n\r\n  skills() {\r\n    return this.all().pipe(map(e => e.skills.sort((a, b) => a.id - b.id)));\r\n  }\r\n\r\n  educations() {\r\n    return this.all().pipe(map(e => e.educations.sort((a, b) => b.id - a.id)));\r\n  }\r\n\r\n  about() {\r\n    return this.all().pipe(map(e => e.about));\r\n  }\r\n\r\n  langs() {\r\n    return this.all().pipe(map(e => e.langs));\r\n  }\r\n\r\n  all() {\r\n    return this.http.get<DataBase>('assets/db/database.json');\r\n  }\r\n}\r\n\r\nexport class DataBase {\r\n  experiences: Experience[] = [];\r\n  projects: Project[] = [];\r\n  skills: Skill[] = [];\r\n  educations: Education[] = [];\r\n  about = new About();\r\n  langs: Lang[] = [];\r\n}\r\n\r\nexport class Experience {\r\n  id = 0;\r\n  period = '';\r\n  societe = '';\r\n  job = '';\r\n  task = '';\r\n  tech = '';\r\n  links = '';\r\n}\r\n\r\nexport class Project {\r\n  id = 0;\r\n  title = '';\r\n  date = new Date();\r\n  description = '';\r\n  tech = '';\r\n  image = '';\r\n  url = '';\r\n  isPrivate = false;\r\n  git = '';\r\n}\r\n\r\nexport class Skill {\r\n  id = 0;\r\n  domaine = '';\r\n  items: { name: string, value: number }[] = [];\r\n}\r\n\r\nexport class Education {\r\n  id = 0;\r\n  period = '';\r\n  dipolma = '';\r\n  universite = '';\r\n}\r\n\r\nexport class About {\r\n  intro = '';\r\n  firstName = '';\r\n  lastName = '';\r\n  profession = '';\r\n  image = '';\r\n  info: { icon: string, text: string, name: string }[] = [];\r\n}\r\n\r\nexport class Lang {\r\n  id = 0;\r\n  lang = '';\r\n  level = '';\r\n}\r\n"],"sourceRoot":"webpack:///"}
